COMMAND SUBSTITUTION:
======================

command substitution does it it takes the output of a command and stores it into the variable.We can achieve that by 
using back ticks ` or $().

If you put a command in the $ parentheses, then it's going to take the output of the command and store it into the variable.


============ Free Memory check ===============
# free -m
              total        used        free      shared  buff/cache   available
Mem:           1836         143        1552          16         139        1541
Swap:             0           0           0

# free -m |grep -i Mem
Mem:           1836         143        1552          16         139        1541

# free -m |grep -i Mem |awk '{print$4}'
1552


Use Command substitution:
---------------------------

# FREE_RAM=`free -m |grep -i Mem |awk '{print$4}'`
# echo $FREE_RAM
1552

(OR)

# FREE_RAM=$(free -m |grep -i Mem |awk '{print$4}')
# echo $FREE_RAM
1552


# echo "Free RAM is $FREE_RAM in Mb"
Free RAM is 1558 in Mb


==================== UPTIME Check: ======================

#uptime
 10:41:34 up  3:08,  5 users,  load average: 0.00, 0.01, 0.04
 
   1       2    3    4    5      6     7        8     9    10       #names $1 $2 $3 etc

# uptime |awk '{print$10}'
0.04

=================== Diskfree check ======================

[root@ip-172-31-10-46 ~]# df -hT

Filesystem     Type      Size  Used Avail Use% Mounted on
devtmpfs       devtmpfs  894M     0  894M   0% /dev
tmpfs          tmpfs     919M     0  919M   0% /dev/shm
tmpfs          tmpfs     919M   17M  902M   2% /run
tmpfs          tmpfs     919M     0  919M   0% /sys/fs/cgroup
/dev/xvda1     xfs        10G  1.9G  8.2G  19% /
tmpfs          tmpfs     184M     0  184M   0% /run/user/1000

[root@ip-172-31-10-46 ~]# df -hT |grep -i /dev/xvda1
/dev/xvda1     xfs        10G  1.9G  8.2G  19% /

[root@ip-172-31-10-46 ~]# df -hT |grep -i /dev/xvda1 |awk '{print$5}'
8.2G


==================================================== SHELL SCRIPT ===================================================

#!/bin/bash
echo "welcome $USER on $HOSTNAME"                                  #USER and HOSTNAME are system variables
echo "################################"

FREE_RAM=$(free -m |grep -i Mem |awk '{print$4}')                  #FREE_RAM=`free -m |grep -i Mem |awk '{print$4}'`
LOAD=$(uptime |awk '{print$10}')                                   #LOAD=`uptime |awk '{print$9}'`
DISK_FREE=$(df -hT |grep -i /dev/xvda1 |awk '{print$5}')           #DISK_FREE=`df -hT |grep -i /dev/xvda1 |awk '{print$5}'`

echo "#####################################"
echo "Available free RAM is $FREE_RAM in MB"
echo "#####################################"
echo "Current load Average is $LOAD"
echo "#####################################"
echo "Current Disk free of partition is $DISK_FREE"


====================================== EXECUTE SCRIPT: ===============================================

[root@ip-172-31-10-46 ~]# sh s1.sh

welcome root on ip-172-31-10-46.ec2.internal
################################
#####################################
Available free RAM is 1556 in MB
#####################################
Current load Average is 0.04
#####################################
Current Disk free of partition is 8.2G


================================================= Use of AWK Command ================================================

awk :  this command is a useful and powerful command used for "pattern matching" as well as for "text processing". 

https://www.softwaretestinghelp.com/unix-filter-awk-sed-commands/

Common Syntax :	awk [options] ‘program text’ file
Example	$ls -l | awk ‘{print $3}’

This command will display only the third column from the long listing of files and directories.


[root@ip-172-31-10-46 ~]# ls -l
total 12
-rwxr-xr-x. 1 root root  116 Jul 12 12:43 cla.sh
-rwxr-xr-x. 1 root root   86 Jul 12 11:30 dis.sh
-rwxr-xr-x. 1 root root 1475 Jul 12 12:59 s1.sh

[root@ip-172-31-10-46 ~]# ls -l |awk '{print$8}'

12:43
11:30
12:59

[root@ip-172-31-10-46 ~]# ls -l |awk '{print$9}'

cla.sh
dis.sh
s1.sh

[root@ip-172-31-10-46 ~]# ls -l |'{print$9}'
-bash: {print$9}: command not found


============================================== USE of SED command ==========================================

Command	sed – this is a powerful command for editing a ‘stream’ of text. It can read input from a text file or from piped input, and process the 
input in one pass..

Common Syntax	sed[OPTION]…..[-f][file]

Example1	sed -n ‘/hello/p’ file1
This command will display all the lines which contains hello

Example2	sed ‘s/hello/HELLO/’ file1
This command will substitute hello with HELLO everywhere in the file.

Example3	sed ‘/hello/,+2d’ file1
This command will delete the two lines starting with the first match of ‘hello’

