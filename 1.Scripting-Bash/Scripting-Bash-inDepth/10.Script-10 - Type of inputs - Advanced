You've already written scripts that redirect the standard output from one command and send it as standard input into another 
by separating those commands with a pipe

First off, there are three types of IO.

1.standard input, 2.standard output and 3.standard error by default.

Standard input comes from the keyboard.

For example, the command accepts standard input and you use the read command to collect information
from a user typing something in at their keyboard.

You also know, however, that standard input doesn't have to come from a keyboard.Again, you used a pipes to take the output generated 
by one command and use that as the standard input.


Beyond standard input, there is standard output and standard error.

By default, both the standard output and standard error are displayed to the screen.

Here stdout redirecting to "file1"

#tail -5 /etc/passwd >file1

[root@ip-172-31-10-46 ~]# cat file1
rakesh:x:1010:1010:rakesh:/home/rakesh:/bin/bash
mindtree:x:1011:1011:mindtree:/home/mindtree:/bin/bash
iqoo7:x:1012:1012:iqoo:/home/iqoo7:/bin/bash
dell:x:1013:1013:facebook:/home/dell:/bin/bash
hrshasigh:x:1014:1014:-m:/home/hrshasigh:/bin/bash



#head -n 1 /etc/passwd
root:x:0:0:root:/root:/bin/bash

--------------------------- script ----------------------------

#!/bin/bash 

#This script demonstrate I/O redirection.

#Redirect STDOUT to a file
FILE="/tmp/data"
head -n1 /etc/passwd > ${FILE}



----- 
#sh s1.sh 

#cat /tmp/data
root:x:0:0:root:/root:/bin/bash

Here o/p is not displaying ,its redirecting in to a file


------------------------------------------------------------------

[root@ip-172-31-10-46 ~]# id -u
0
[root@ip-172-31-10-46 ~]# id -un
root
[root@ip-172-31-10-46 ~]# id -un >id
[root@ip-172-31-10-46 ~]# cat id
root



--------------------------------------- stdin and stdout -------------------------------------------

head -n1 /etc/passwd
root:x:0:0:root:/root:/bin/bash



#!/bin/bash 

#This script demonstrate I/O redirection.

#Redirect STDOUT to a file
FILE="/tmp/data"
head -n10 /etc/passwd > ${FILE}

#Redirect STDIN to a program
read LINEVND < ${FILE}           #variable LINEVND contains first line of the file.
echo "LINEVND contains: ${LINEVND}"


-------------------------------- Add a password to the user using "file" ----------------

#sh s1.sh
LINEVND contains: root:x:0:0:root:/root:/bin/bash



[root@ip-172-31-26-70 ~]# useradd marshal

[root@ip-172-31-26-70 ~]# echo "secret" > password

Add a password to the user using "file" without prompt to manual password
--------------------------------------------------------------------------

$ passwd --stdin marshal < password

Changing password for user marshal.
passwd: all authentication tokens updated successfully.


$check password able to access or not

$su - marshal
pwd: 


Here < - standard i/p comes from file 
| -> comes standard i/p comes from o/p of the command.



#!/bin/bash 

#This script demonstrate I/O redirection.

#Redirect STDOUT to a file (file name is "data")
FILE="/tmp/data"
head -n10 /etc/passwd > ${FILE}

#Redirect STDIN to a program
read LINEVND < ${FILE}           #variable LINEVND contains first line of the file.
echo "LINEVND contains:: ${LINEVND}"

#Redirect STDOUT to a file,overwriting the file 
head -n3 /etc/passwd > "${FILE}"
echo 
echo "Contents of ${FILE}: "
cat ${FILE}


------------------------------------------

first time we are putting 10 lines in the file ,then next we are keeping 3 lines overwrtie with previous file.


[root@ip-172-31-26-70 ~]# sh s1.sh
LINEVND contains:: root:x:0:0:root:/root:/bin/bash

Contents of /tmp/data:
root:x:0:0:root:/root:/bin/bash
bin:x:1:1:bin:/bin:/sbin/nologin
daemon:x:2:2:daemon:/sbin:/sbin/nologin


How to append data to a file (without overwrite)

echo "another-line" >> password


[root@ip-172-31-26-70 ~]# date | sha256sum | head -c10
a32957bf8d

[root@ip-172-31-26-70 ~]# date | sha256sum | head -c10 >> password

[root@ip-172-31-26-70 ~]# ls
password  s1.sh

[root@ip-172-31-26-70 ~]# cat password
password
another-line
a32957bf8d



--------------------------------------------- script -----------------------------------------

#!/bin/bash 

#This script demonstrate I/O redirection.

#Redirect STDOUT to a file (file name is "data")
FILE="/tmp/data"
head -n10 /etc/passwd > ${FILE}

#Redirect STDIN to a program
read LINEVND < ${FILE}           #variable LINEVND contains first line of the file.
echo "LINEVND contains:: ${LINEVND}"

#Redirect STDOUT to a file,overwriting the file 
head -n3 /etc/passwd > "${FILE}"
echo 
echo "Contents of ${FILE}: "
cat ${FILE}

#Redirect STDOUT to a file, appending to the file.
echo "${RANDOM} ${RANDOM}" >> ${FILE}
echo "${RANDOM} ${RANDOM}" >> ${FILE}
echo 
echo "Contents for ${FILE}:"
cat ${FILE}



------------------------------------Execute ---------------------------------------

[root@ip-172-31-26-70 ~]# vi s1.sh
[root@ip-172-31-26-70 ~]# sh s1.sh
LINEVND contains:: root:x:0:0:root:/root:/bin/bash

Contents of /tmp/data:
root:x:0:0:root:/root:/bin/bash
bin:x:1:1:bin:/bin:/sbin/nologin
daemon:x:2:2:daemon:/sbin:/sbin/nologin

Contents for /tmp/data:
root:x:0:0:root:/root:/bin/bash
bin:x:1:1:bin:/bin:/sbin/nologin
daemon:x:2:2:daemon:/sbin:/sbin/nologin
24294 30
22865 31813



