#!/bin/bash

#Display the UID and user name of the user executing the script
#Display if user is the root user or not

#Display the UID
echo "your UID is ${UID}"

#Display username
USER_NAME=$(id -un)                                #(OR) USER_NAME=$(whoami)   #(OR) USER_NAME=`id -un`
echo "Your username is ${USER_NAME}"

#Display if the user is root or not
if [[ "${UID}" -eq 0 ]]
then
  echo "You are root"
else
  echo "you are not a root"
fi



--------------------- #Execute from root user O/P -------------------------
your UID is 0
Your username is root
You are root



#Execute from other user
--------------------- o/p -------------------------
# sh s1.sh
your UID is 1000
Your username is centos
you are not a root


================================================== man bash ====================================================

#man bash
https://github.com/chvinodgcp5010/Devops-ALL/blob/main/1.Scripting-Bash/Scripting-Bash-inDepth/2.man%20bash

UID    Expands to the user ID of the current user, initialized at shell startup.  This variable is readonly.



------------------------ #man id ------------------------
#type -a id
id is /usr/bin/id

#means its not a build in shell command so you can check info using "man id"

#man id

       -n, --name
              print a name instead of a number, for -ugG

       -r, --real
              print the real ID instead of the effective ID, with -ugG

       -u, --user
              print only the effective user ID


[centos@ip-172-31-10-46 ~]$ echo $UID
1000

#its readonly, it's not able to add extra values to it.

[centos@ip-172-31-10-46 ~]$ UID="1"
-bash: UID: readonly variable


============================== how to check id of the user ==============================

#id
uid=1000(centos) gid=1000(centos) groups=1000(centos),4(adm),190(systemd-journal) context=unconfined_u:unconfined_r:unconfined_t:s0-s0:c0.c1023

#id of the user
[centos@ip-172-31-10-46 ~]$ id -u
1000

#name of the user:
[centos@ip-172-31-10-46 ~]$ id -u -n               #or id -un
centos

#You can also check the user using "whoami"

[centos@ip-172-31-10-46 ~]$ whoami
centos


Lets look what type of command it's ( not built in shell command )
[centos@ip-172-31-10-46 ~]$ type -a whoami
whoami is /usr/bin/whoami

its not build in shell command so help will not work , man only works.

#man whoami

DESCRIPTION
       Print the user name associated with the current effective user ID.  Same as id -un


============================== if ==============================

#type -a if
if is a shell keyword so you can access info using "help" if not shell keyword you can use man if

#help if
if: 

if COMMANDS; then COMMANDS; [ elif COMMANDS; then COMMANDS; ]... [ else COMMANDS; ] fi
    Execute commands based on conditional.
	
	 The `if COMMANDS' list is executed.  If its exit status is zero, then the
    `then COMMANDS' list is executed.  Otherwise, each `elif COMMANDS' list is
    executed in turn, and if its exit status is zero, the corresponding
    `then COMMANDS' list is executed and the if command completes.  Otherwise,
    the `else COMMANDS' list is executed, if present.  The exit status of the
    entire construct is the exit status of the last command executed, or zero
    if no condition tested true.

    Exit Status:
    Returns the status of the last command executed.

============================== [[ ==============================

#type -a [[

[[ is a shell keyword so you can access it using "help"


#help [[

[[ ... ]]: [[ expression ]]
    Execute conditional command.

    Returns a status of 0 or 1 depending on the evaluation of the conditional
    expression EXPRESSION.  Expressions are composed of the same primaries used
    by the `test' builtin, and may be combined using the following operators:

      ( EXPRESSION )   	Returns the value of EXPRESSION
      ! EXPRESSION     	       	True if EXPRESSION is false; else false
      EXPR1 && EXPR2   	True if both EXPR1 and EXPR2 are true; else false
      EXPR1 || EXPR2   	True if either EXPR1 or EXPR2 is true; else false

    When the `==' and `!=' operators are used, the string to the right of
    the operator is used as a pattern and pattern matching is performed.
    When the `=~' operator is used, the string to the right of the operator
    is matched as a regular expression.

    The && and || operators do not evaluate EXPR2 if EXPR1 is sufficient to
    determine the expression's value.

    Exit Status:
    0 or 1 depending on value of EXPRESSION.


============================== test ==============================

#type -a test
test is a shell builtin
test is /usr/bin/test

#help test
test: test [expr]
    Evaluate conditional expression.

    Exits with a status of 0 (true) or 1 (false) depending on
    the evaluation of EXPR.  Expressions may be unary or binary.  Unary
    expressions are often used to examine the status of a file.  There
    are string operators and numeric comparison operators as well.

    The behavior of test depends on the number of arguments.  Read the
    bash manual page for the complete specification.

    File operators:

      -a FILE        True if file exists.
      -b FILE        True if file is block special.
      -c FILE        True if file is character special.
      -d FILE        True if file is a directory.
      -e FILE        True if file exists.
      -f FILE        True if file exists and is a regular file.
      -g FILE        True if file is set-group-id.
      -h FILE        True if file is a symbolic link.
      -L FILE        True if file is a symbolic link.
      -k FILE        True if file has its `sticky' bit set.
      -p FILE        True if file is a named pipe.
      -r FILE        True if file is readable by you.
      -s FILE        True if file exists and is not empty.
      -S FILE        True if file is a socket.
      -t FD          True if FD is opened on a terminal.
      -u FILE        True if the file is set-user-id.
      -w FILE        True if the file is writable by you.
      -x FILE        True if the file is executable by you.
      -O FILE        True if the file is effectively owned by you.
      -G FILE        True if the file is effectively owned by your group.
      -N FILE        True if the file has been modified since it was last read.

      FILE1 -nt FILE2  True if file1 is newer than file2 (according to
                       modification date).

      FILE1 -ot FILE2  True if file1 is older than file2.

      FILE1 -ef FILE2  True if file1 is a hard link to file2.

    String operators:

      -z STRING      True if string is empty.

      -n STRING
         STRING      True if string is not empty.

      STRING1 = STRING2
                     True if the strings are equal.
      STRING1 != STRING2
                     True if the strings are not equal.
      STRING1 < STRING2
                     True if STRING1 sorts before STRING2 lexicographically.
      STRING1 > STRING2
                     True if STRING1 sorts after STRING2 lexicographically.

    Other operators:

      -o OPTION      True if the shell option OPTION is enabled.
      -v VAR   	 True if the shell variable VAR is set
      ! EXPR         True if expr is false.
      EXPR1 -a EXPR2 True if both expr1 AND expr2 are true.
      EXPR1 -o EXPR2 True if either expr1 OR expr2 is true.

      arg1 OP arg2   Arithmetic tests.  OP is one of -eq, -ne,
                     -lt, -le, -gt, or -ge.

    Arithmetic binary operators return true if ARG1 is equal, not-equal,
    less-than, less-than-or-equal, greater-than, or greater-than-or-equal
    than ARG2.

    Exit Status:
    Returns success if EXPR evaluates to true; fails if EXPR evaluates to
    false or an invalid argument is given.






