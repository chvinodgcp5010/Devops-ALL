man bash 

search /RANDOM

       RANDOM Each time this parameter is referenced, a random integer between 0 and 32767 is generated.  The  sequence  of  random
              numbers may be initialized by assigning a value to RANDOM.  If RANDOM is unset, it loses its special properties, even
              if it is subsequently reset.

[root@ip-172-31-10-46 ~]# echo "${RANDOM}"
6476
[root@ip-172-31-10-46 ~]# echo "${RANDOM}"
26981
[root@ip-172-31-10-46 ~]# echo "${RANDOM}"
29778
[root@ip-172-31-10-46 ~]# echo "${RANDOM}"
29594


# three random numbers together for better or strong password.

echo "${RANDOM}""${RANDOM}""${RANDOM}"
1503118019237


================= shell script ===============

#!/bin/bash

#This script generates a list of random passwords

#A random number as a passwords
PASSWORD="${RANDOM}"
echo "${PASSWORD}"

#Three random numbers together
PASSWORD="${RANDOM}""${RANDOM}""${RANDOM}"
echo "${PASSWORD}"


Execute 
-----------
sh s1.sh
11091
1041774323344

EACH AND EVERYTIME PASSWORD WILL CHANGE 

[root@ip-172-31-10-46 ~]# sh s1.sh
25296
198592825923804


[root@ip-172-31-10-46 ~]# sh s1.sh
23608
55431799928974


[root@ip-172-31-10-46 ~]# sh s1.sh
13549
19950127618690


FOR EASY UNDERSTANDING UPDATE TIME SO WE CAN NOW THE PASSWORD  & WHEN IT GOT GENERATED
-----------------------------------------------------------------------------------------

This will continually change so use this as password.

# date
Wed Jul 27 10:54:20 UTC 2022


#man date

/FORMAT

       FORMAT controls the output.  Interpreted sequences are:


       %s     seconds since 1970-01-01 00:00:00 UTC

       %S     second (00..60)


       %s     seconds since 1970-01-01 00:00:00 UTC
	   
	  -> Means no of seconds elaps since 1970
	  
[root@ip-172-31-10-46 ~]# man date

[root@ip-172-31-10-46 ~]# date
Wed Jul 27 10:59:10 UTC 2022

[root@ip-172-31-10-46 ~]# date +%s
1658919577


[root@ip-172-31-10-46 ~]# date +%s
1658919608


[root@ip-172-31-10-46 ~]# date +%s
1658919619


[root@ip-172-31-10-46 ~]# date +%s
1658919621

=================================== shell script ===================================
#!/bin/bash

#This script generates a list of random passwords

#A random number as a passwords
PASSWORD="${RANDOM}"
echo "${PASSWORD}"

#Three random numbers together
PASSWORD="${RANDOM}""${RANDOM}""${RANDOM}"
echo "${PASSWORD}"

#Use the current date/time as the basis for passwords
PASSWORD="$(date +%s)"
echo "${PASSWORD}"


Execute:
----------

[root@ip-172-31-10-46 ~]# sh s1.sh
21367
24441592630422
1658919920


[root@ip-172-31-10-46 ~]# sh s1.sh
1005
23702426127763
1658919964


[root@ip-172-31-10-46 ~]# sh s1.sh
4426
96651712731337
1658919966



-------------------------------- 

       %N     nanoseconds (000000000..999999999)
	   
	   
[root@ip-172-31-10-46 ~]# date +%s%N
1658921142711157914

[root@ip-172-31-10-46 ~]# date +%s%N
1658921145321097802

[root@ip-172-31-10-46 ~]# date +%s%N
1658921146466185210


Maybe the first portion of the password that represents percent since is only incrementing by one digit.
But the last few digits there pretty much look random because they're based on the nanoseconds of when

========================================= SHELL SCRIPT ===================================

#!/bin/bash

#This script generates a list of random passwords

#A random number as a passwords
PASSWORD="${RANDOM}"
echo "${PASSWORD}"

#Three random numbers together
PASSWORD="${RANDOM}""${RANDOM}""${RANDOM}"
echo "${PASSWORD}"

#Use the current date/time as the basis for passwords
PASSWORD="$(date +%s)"
echo "${PASSWORD}"

#Use nanoseconds to act as randomization
PASSWORD="$(date +%s%N)"
echo "${PASSWORD}"

Execute:
----------

[root@ip-172-31-10-46 ~]# sh s1.sh
8237
42141869622201
1658921432
1658921432414450026

	   
ls -l /usr/bin/*sum



============================ sha256sum ===================================

#date +%s |sha256sum
603a57e09cdbb40e5b34026011e0ec55db5324565c2a9e049a902e73f43686db  -

[root@ip-172-31-10-46 ~]# date +%s |sha256sum
0f900ebb78473f03054647a039a03edcf9b543c7f194ac0f6f9994ca1abaa846  -

[root@ip-172-31-10-46 ~]# date +%s |sha256sum
55a86d173964c32af688509d4157a8ae06fe754c2c1580570992af3904aa6809  -

#man sha256sum

NAME
       sha256sum - compute and check SHA256 message digest

SYNOPSIS
       sha256sum [OPTION]... [FILE]...

DESCRIPTION
       Print or check SHA256 (256-bit) checksums.  With no FILE, or when FILE is -, read standard input.

       -b, --binary
              read in binary mode

       -c, --check
              read SHA256 sums from the FILEs and check them

       --tag  create a BSD-style checksum

       -t, --text
              read in text mode (default)

              Note: There is no difference between binary and text mode option on GNU system.

   The following four options are useful only when verifying checksums:
       --quiet
              don't print OK for each successfully verified file

       --status
              don't output anything, status code shows success

       --strict
              exit non-zero for improperly formatted checksum lines

       -w, --warn
              warn about improperly formatted checksum lines

       --help display this help and exit

       --version
              output version information and exit

       The  sums are computed as described in FIPS-180-2.  When checking, the input should be a former output of this program.  The
       default mode is to print a line with checksum, a character indicating input mode ('*' for binary, space for text), and  name
       for each FILE.



===================================== man head =========================================

NAME
       head - output the first part of files

SYNOPSIS
       head [OPTION]... [FILE]...

DESCRIPTION
       Print  the  first  10 lines of each FILE to standard output.  With more than one FILE, precede each with a header giving the
       file name.  With no FILE, or when FILE is -, read standard input.

       Mandatory arguments to long options are mandatory for short options too.

       -c, --bytes=[-]K
              print the first K bytes of each file; with the leading '-', print all but the last K bytes of each file
	   
	   head -c2 /etc/passwd  # print first line first 2 characters.

       -n, --lines=[-]K
              print the first K lines instead of the first 10; with the leading '-', print all but the last K lines of each file

       -q, --quiet, --silent
              never print headers giving file names

       -v, --verbose
              always print headers giving file names

       --help display this help and exit

       --version
              output version information and exit

       K may have a multiplier suffix: b 512, kB 1000, K 1024, MB 1000*1000, M 1024*1024, GB 1000*1000*1000, G 1024*1024*1024,  and
       so on for T, P, E, Z, Y.



[root@ip-172-31-10-46 ~]# head -n1 /etc/passwd
root:x:0:0:root:/root:/bin/bash

[root@ip-172-31-10-46 ~]# head /etc/passwd
root:x:0:0:root:/root:/bin/bash
bin:x:1:1:bin:/bin:/sbin/nologin
daemon:x:2:2:daemon:/sbin:/sbin/nologin
adm:x:3:4:adm:/var/adm:/sbin/nologin
lp:x:4:7:lp:/var/spool/lpd:/sbin/nologin
sync:x:5:0:sync:/sbin:/bin/sync
shutdown:x:6:0:shutdown:/sbin:/sbin/shutdown
halt:x:7:0:halt:/sbin:/sbin/halt
mail:x:8:12:mail:/var/spool/mail:/sbin/nologin
operator:x:11:0:operator:/root:/sbin/nologin


[root@ip-172-31-10-46 ~]# head -n1 /etc/passwd
root:x:0:0:root:/root:/bin/bash


[root@ip-172-31-10-46 ~]# head -n 1 /etc/passwd
root:x:0:0:root:/root:/bin/bash


[root@ip-172-31-10-46 ~]# head -2 /etc/passwd
root:x:0:0:root:/root:/bin/bash
bin:x:1:1:bin:/bin:/sbin/nologin



[root@ip-172-31-10-46 ~]# head -n 1 /etc/passwd
root:x:0:0:root:/root:/bin/bash


[root@ip-172-31-10-46 ~]# head -c 1 /etc/passwd
r[root@ip-172-31-10-46 ~]#

#head -c2 /etc/passwd
ro


[root@ip-172-31-10-46 ~]# echo testing | head -c2
te

[root@ip-172-31-10-46 ~]# date +%s
1658928750


[root@ip-172-31-10-46 ~]# date +%s | head -c8
16589287

[root@ip-172-31-10-46 ~]# date +%s | sha256sum |head -c8
814a30d4

[root@ip-172-31-10-46 ~]# date +%s | sha256sum |head -c8
f0a7658f

[root@ip-172-31-10-46 ~]# date +%s | sha256sum |head -c8
addf1a62

[root@ip-172-31-10-46 ~]# date +%s%N | sha256sum |head -c8
87b798b2

[root@ip-172-31-10-46 ~]# date +%s%N | sha256sum |head -c8
ebc810a8[root@ip-172-31-10-46 ~]# date +%s%N | sha256sum |head -c8

# date +%s%N | sha256sum | head -c32
c0f25615e5fbdd98dfbc0ad27dd2edc7


------------------------------ shell script --------------------------

#!/bin/bash

#This script generates a list of random passwords

#A random number as a passwords
PASSWORD="${RANDOM}"
echo "${PASSWORD}"

#Three random numbers together
PASSWORD="${RANDOM}""${RANDOM}""${RANDOM}"
echo "${PASSWORD}"

#Use the current date/time as the basis for passwords
PASSWORD="$(date +%s)"    
echo "${PASSWORD}"

#Use nanoseconds to act as randomization
PASSWORD="$(date +%s%N)"
echo "${PASSWORD}"

#A better passwords
PASSWORD=$(date +%s%N | sha256sum | head -c32)
echo "${PASSWORD}"

#An even better password
PASSWORD=$(date +%s%N${RANDOM}${RANDOM} | sha256sum | head -c48)

Execute:
-----------

root@ip-172-31-10-46 ~]# sh s1.sh
21505
133992699915914
1658929334
1658929334802893260
d1962a9e5710ad66a7518c8675fb5a0c

[root@ip-172-31-10-46 ~]# sh s1.sh
10650
307143053412963
1658929418
1658929418824524369
8750169ba89e0ce826608de300e70f8b

========================================= man fold =================================================

echo '!@#$%^&*()_-+='
!@#$%^&*()_-+=


[root@ip-172-31-10-46 ~]# echo '!@#$%^&*()_-+=' | fold -w1
!
@
#
$
%
^
&
*
(
)
_
-
+
=

# shuffling of special characters -- shuf

[root@ip-172-31-10-46 ~]# echo '!@#$%^&*()_-+=' | fold -w1 | shuf
-
_
(
+
=
!
$
%
^
*
#
&
@
)


[root@ip-172-31-10-46 ~]# echo '!@#$%^&*()_-+=' | fold -w1 | shuf | head -c1
@


#[root@ip-172-31-10-46 ~]# echo '!@#$%^&*()_-+=' | fold -w1 | shuf | head -c1
_[root@ip-172-31-10-46 ~]# echo '!@#$%^&*()_-+=' | fold -w1 | shuf | head -c1
%[root@ip-172-31-10-46 ~]# echo '!@#$%^&*()_-+=' | fold -w1 | shuf | head -c1
$[root@ip-172-31-10-46 ~]# echo '!@#$%^&*()_-+=' | fold -w1 | shuf | head -c1



---------------------  man fold ----------------------


NAME
       fold - wrap each input line to fit in specified width

SYNOPSIS
       fold [OPTION]... [FILE]...

DESCRIPTION
       Wrap input lines in each FILE (standard input by default), writing to standard output.

       Mandatory arguments to long options are mandatory for short options too.

       -b, --bytes
              count bytes rather than columns

       -c, --characters
              count characters rather than columns

       -s, --spaces
              break at spaces

       -w, --width=WIDTH
              use WIDTH columns instead of 80

       --help display this help and exit

       --version
              output version information and exit

       GNU  coreutils online help: <http://www.gnu.org/software/coreutils/> Report fold translation bugs to <http://translationpro‐
       ject.org/team/>


---------------------  man shuf ----------------------

NAME
       shuf - generate random permutations

SYNOPSIS
       shuf [OPTION]... [FILE]
       shuf -e [OPTION]... [ARG]...
       shuf -i LO-HI [OPTION]...

DESCRIPTION
       Write a random permutation of the input lines to standard output.

       Mandatory arguments to long options are mandatory for short options too.

       -e, --echo
              treat each ARG as an input line

       -i, --input-range=LO-HI
              treat each number LO through HI as an input line

       -n, --head-count=COUNT
              output at most COUNT lines

       -o, --output=FILE
              write result to FILE instead of standard output

       --random-source=FILE
              get random bytes from FILE

       -r, --repeat
              output lines can be repeated

       -z, --zero-terminated
              end lines with 0 byte, not newline

========================================================================================

#man date

NAME
       date - print or set the system date and time

SYNOPSIS
       date [OPTION]... [+FORMAT]
       date [-u|--utc|--universal] [MMDDhhmm[[CC]YY][.ss]]

DESCRIPTION
       Display the current time in the given FORMAT, or set the system date.

       Mandatory arguments to long options are mandatory for short options too.

       -d, --date=STRING
              display time described by STRING, not 'now'

       -f, --file=DATEFILE
              like --date once for each line of DATEFILE

       -I[TIMESPEC], --iso-8601[=TIMESPEC]
              output  date/time in ISO 8601 format.  TIMESPEC='date' for date only (the default), 'hours', 'minutes', 'seconds', or
              'ns' for date and time to the indicated precision.

       -r, --reference=FILE
              display the last modification time of FILE

       -R, --rfc-2822
              output date and time in RFC 2822 format.  Example: Mon, 07 Aug 2006 12:34:56 -0600

       --rfc-3339=TIMESPEC
              output date and time in RFC 3339 format.  TIMESPEC='date', 'seconds', or 'ns' for date and time to the indicated pre‐
              cision.  Date and time components are separated by a single space: 2006-08-07 12:34:56-06:00

       -s, --set=STRING
              set time described by STRING

       -u, --utc, --universal
              print or set Coordinated Universal Time (UTC)

       --help display this help and exit

       --version
              output version information and exit

       FORMAT controls the output.  Interpreted sequences are:

       %%     a literal %

       %a     locale's abbreviated weekday name (e.g., Sun)

       %A     locale's full weekday name (e.g., Sunday)

       %b     locale's abbreviated month name (e.g., Jan)

       %B     locale's full month name (e.g., January)

       %c     locale's date and time (e.g., Thu Mar  3 23:05:25 2005)

       %C     century; like %Y, except omit last two digits (e.g., 20)

       %d     day of month (e.g., 01)

       %D     date; same as %m/%d/%y

       %e     day of month, space padded; same as %_d

       %F     full date; same as %Y-%m-%d

       %g     last two digits of year of ISO week number (see %G)

       %G     year of ISO week number (see %V); normally useful only with %V

       %h     same as %b

       %H     hour (00..23)

       %I     hour (01..12)

       %j     day of year (001..366)

       %k     hour, space padded ( 0..23); same as %_H

       %l     hour, space padded ( 1..12); same as %_I

       %m     month (01..12)

       %M     minute (00..59)

       %n     a newline

       %N     nanoseconds (000000000..999999999)

       %p     locale's equivalent of either AM or PM; blank if not known

       %P     like %p, but lower case

       %r     locale's 12-hour clock time (e.g., 11:11:04 PM)

       %R     24-hour hour and minute; same as %H:%M

       %s     seconds since 1970-01-01 00:00:00 UTC

       %S     second (00..60)

       %t     a tab

       %T     time; same as %H:%M:%S

       %u     day of week (1..7); 1 is Monday

       %U     week number of year, with Sunday as first day of week (00..53)

       %V     ISO week number, with Monday as first day of week (01..53)

       %w     day of week (0..6); 0 is Sunday

       %W     week number of year, with Monday as first day of week (00..53)

       %x     locale's date representation (e.g., 12/31/99)

       %X     locale's time representation (e.g., 23:13:48)

       %y     last two digits of year (00..99)

       %Y     year

       %z     +hhmm numeric time zone (e.g., -0400)

       %:z    +hh:mm numeric time zone (e.g., -04:00)

       %::z   +hh:mm:ss numeric time zone (e.g., -04:00:00)

       %:::z  numeric time zone with : to necessary precision (e.g., -04, +05:30)

       %Z     alphabetic time zone abbreviation (e.g., EDT)

       By default, date pads numeric fields with zeroes.  The following optional flags may follow '%':

       -      (hyphen) do not pad the field

       _      (underscore) pad with spaces

       0      (zero) pad with zeros

       ^      use upper case if possible

       #      use opposite case if possible

       After  any flags comes an optional field width, as a decimal number; then an optional modifier, which is either E to use the
       locale's alternate representations if available, or O to use the locale's alternate numeric symbols if available.

ENVIRONMENT
       TZ     Specifies the timezone, unless overridden by command line parameters.  If neither  is  specified,  the  setting  from
              /etc/localtime is used.

EXAMPLES
       Convert seconds since the epoch (1970-01-01 UTC) to a date

              $ date --date='@2147483647'

       Show the time on the west coast of the US (use tzselect(1) to find TZ)

              $ TZ='America/Los_Angeles' date

       Show the local time for 9AM next Friday on the west coast of the US

              $ date --date='TZ="America/Los_Angeles" 09:00 next Fri'

       GNU  coreutils online help: <http://www.gnu.org/software/coreutils/> Report date translation bugs to <http://translationpro‐
       ject.org/team/>















