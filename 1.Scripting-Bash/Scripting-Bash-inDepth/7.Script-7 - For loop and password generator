
A parameter is a variable that is being used inside the shell script.

An argument is the data passed into the shell script.

very first positional parameter is Dollar Zero, which contains the name of
the script itself.

The next positional parameter is Dollar Sign one, which stores the value of the first argument passed
to the script on the command line.


-------------------------- shell script ----------------------------------

#!/bin/bash

#This script generates a random password for each user specified on the command line

#Display what the user typed on the command line
echo "You executed this command: ${0}"


O/P:
./s1.sh

o/p:
You executed this command: ./s1.sh


-----------------------------------

#!/bin/bash

#This script generates a random password for each user specified on the command line

#Display what the user typed on the command line
echo "You executed this command: ${1}"

o/p:

./s1.sh vinod

You executed this command: vinod


====================================== man bash =======================================
#man bash 
/path 

       PATH   The search path for commands.  It is a colon-separated list of directories in which the shell looks for commands (see
              COMMAND  EXECUTION below).  A zero-length (null) directory name in the value of PATH indicates the current directory.
              A null directory name may appear as two adjacent colons, or as an initial or trailing colon.   The  default  path  is
              system-dependent,    and    is    set    by   the   administrator   who   installs   bash.    A   common   value   is
              ``/usr/gnu/bin:/usr/local/bin:/usr/ucb:/bin:/usr/bin''.



echo ${PATH}
/usr/local/sbin:/usr/local/bin:/sbin:/bin:/usr/sbin:/usr/bin:/root/bin

Bash searches through the list of directories defined in the path variable and
executes the first match that it finds.

If no match is found, then a command not found error message is displayed.


#which head
/bin/head


So this tells us that when we type in head at the command line, the program located at User Ben Head

will be executed.

=============================
#man basename

NAME
       basename - strip directory and suffix from filenames

#basename /this/is/from/devops/
devops

#man dirname

DESCRIPTION
       Output  each NAME with its last non-slash component and trailing slashes removed; if NAME contains no /'s, output '.' (mean‐
       ing the current directory).


#dirname /this/is/from/devops
/this/is/from


[root@ip-172-31-10-46 ~]# ls /this/is/from/devops
ls: cannot access /this/is/from/devops: No such file or directory

[root@ip-172-31-10-46 ~]# ls /this/is/from/
ls: cannot access /this/is/from/: No such file or directory

it will not check any if file exists or not simply it performs the action.


============================= 

#!/bin/bash

#This script generates a random password for each user specified on the command line

#Display what the user typed on the command line
echo "You executed this command after sh : ${0}"                           #${0} is the first argument after sh /root/s1.sh

#Display the path and filename of the script
echo "You used $(dirname ${0}) as path to the $(basename ${0})"            #basename is the last name of the file placed #dir name is path otherthan filename

Execute:
------------


You executed this command after sh : s1.sh
You used . as path to the s1.sh



[root@ip-172-31-10-46 ~]# sh /root/s1.sh

You executed this command after sh : /root/s1.sh
You used /root as path to the s1.sh


Here directory of the script is /root and basename of the sctipt is s1.sh


------------------------------------ man bash --------------------------------------------
#man bash 

/special parameter

enter
n
n

   Special Parameters
       The shell treats several parameters specially.  These parameters may only be referenced; assignment to them is not allowed.
       *      Expands  to the positional parameters, starting from one.  When the expansion occurs within double quotes, it expands
              to a single word with the value of each parameter separated by the first character of the IFS special variable.  That
              is,  "$*"  is  equivalent to "$1c$2c...", where c is the first character of the value of the IFS variable.  If IFS is
              unset, the parameters are separated by spaces.  If IFS is null, the parameters are joined without intervening separa‐
              tors.
       @      Expands to the positional parameters, starting from one.  When the expansion occurs within double quotes, each param‐
              eter expands to a separate word.  That is, "$@" is equivalent to "$1" "$2" ...  If the double-quoted expansion occurs
              within  a  word, the expansion of the first parameter is joined with the beginning part of the original word, and the
              expansion of the last parameter is joined with the last part of the original word.   When  there  are  no  positional
              parameters, "$@" and $@ expand to nothing (i.e., they are removed).
       #      Expands to the number of positional parameters in decimal.
       ?      Expands to the exit status of the most recently executed foreground pipeline.
       -      Expands  to  the  current  option flags as specified upon invocation, by the set builtin command, or those set by the
              shell itself (such as the -i option).
       $      Expands to the process ID of the shell.  In a () subshell, it expands to the process ID of the current shell, not the
              subshell.
       !      Expands to the process ID of the most recently executed background (asynchronous) command.
       0      Expands  to  the  name of the shell or shell script.  This is set at shell initialization.  If bash is invoked with a
              file of commands, $0 is set to the name of that file.  If bash is started with the -c option, then $0 is set  to  the
              first  argument  after  the  string to be executed, if one is present.  Otherwise, it is set to the file name used to
              invoke bash, as given by argument zero.
       _      At shell startup, set to the absolute pathname used to invoke the shell or shell script being executed as  passed  in
              the  environment  or argument list.  Subsequently, expands to the last argument to the previous command, after expan‐
              sion.  Also set to the full pathname used to invoke each command executed and placed in the environment  exported  to
              that command.  When checking mail, this parameter holds the name of the mail file currently being checked.


 #      Expands to the number of positional parameters in decimal.


----------------------------------- script --------------------------------------------

#!/bin/bash

#This script generates a random password for each user specified on the command line

#Display what the user typed on the command line
echo "You executed this command after sh : ${0}"

#Display the path and filename of the script
echo "You used $(dirname ${0}) as path to the $(basename ${0})"

#Tell them how many arguments they passed in 
#(inside script they are parameters , outside they are arguments)
NUMBER_OF_PARAMETERS="${#}"
echo "arguments passed are ${NUMBER_OF_PARAMETERS}"


o/p:
-----
#sh s1.sh

You executed this command after sh : s1.sh
You used . as path to the s1.sh
arguments passed are 0


[root@ip-172-31-10-46 ~]# sh s1.sh hi hellow howru

You executed this command after sh : s1.sh
You used . as path to the s1.sh
arguments passed are 3                       #hi hellow howru
 
------------------------------------------------------------------------

#!/bin/bash

#This script generates a random password for each user specified on the command line

#Display what the user typed on the command line
echo "You executed this command after sh : ${0}"

#Display the path and filename of the script
echo "You used $(dirname ${0}) as path to the $(basename ${0})"

#Tell them how many arguments they passed in 
#(inside script they are parameters , outside they are arguments)
NUMBER_OF_PARAMETERS="${#}"       # or $#
echo "arguments passed are ${NUMBER_OF_PARAMETERS}"

#Make sure they at least supply 1 argument otherwise it stop the process 
if  [[ "${NUMBER_OF_PARAMETERS}" -lt 1 ]]
then 
  echo "USAGE : ${0} and ${#} arguments passed"
  exit 1            #means script was not passed then check echo ${?} it provide non-zero
fi 

------------------------------------------------

#sh s1.sh
You executed this command after sh : s1.sh
You used . as path to the s1.sh
arguments passed are 0
USAGE : s1.sh and 0 arguments passed

#echo ${?}              # you can check last command is successful or not using below (if its non zero it if condition was failed)
1

now lets vary arguments and execute script

[root@ip-172-31-10-46 ~]# sh s1.sh  hi hello
You executed this command after sh : s1.sh
You used . as path to the s1.sh
arguments passed are 2


[root@ip-172-31-10-46 ~]# echo ${?}          # means if condition was passed 
0



enclosed in quotation marks, they're treated as one argument

 sh s1.sh one "this is two" three
You executed this command after sh : s1.sh
You used . as path to the s1.sh
arguments passed are 3


[root@ip-172-31-10-46 ~]# sh s1.sh 1 "2 3" 4
You executed this command after sh : s1.sh
You used . as path to the s1.sh
arguments passed are 3

====================================== for loop =================================

for x in devops cloud  terraform
> do
>  echo "hi ${x}"
> done

o/p:
--------

hi devops
hi cloud
hi terraform

syntax of above shell script 

#for x in devops cloud  terraform ; do   echo "hi ${x}"; done

; command separator (its not easy to understand so use multiple line)


======================================================================

       @      Expands to the positional parameters, starting from one.  When the expansion occurs within double quotes, each param‐
              eter expands to a separate word.  That is, "$@" is equivalent to "$1" "$2" ...  If the double-quoted expansion occurs
              within  a  word, the expansion of the first parameter is joined with the beginning part of the original word, and the
              expansion of the last parameter is joined with the last part of the original word.   When  there  are  no  positional
              parameters, "$@" and $@ expand to nothing (i.e., they are removed).
			  
			  
${0} script name 
${1} -> sh s1.sh hi   === here ${1} means hi 


-------------------------------------- script --------------------------------------------
 
#!/bin/bash

#This script generates a random password for each user specified on the command line

#Display what the user typed on the command line
echo "You executed this command after sh : ${0}"

#Display the path and filename of the script
echo "You used $(dirname ${0}) as path to the $(basename ${0})"

#Tell them how many arguments they passed in 
#(inside script they are parameters , outside they are arguments)
NUMBER_OF_PARAMETERS="${#}"       # or $#
echo "arguments passed are ${NUMBER_OF_PARAMETERS}"

#Make sure they at least supply 1 argument otherwise it stop the process 
if  [[ "${NUMBER_OF_PARAMETERS}" -lt 1 ]]
then 
  echo "USAGE : ${0} and ${#} arguments passed"
  exit 1            #means script was not passed then check echo ${?} it provide non-zero
fi 

#Generate and display a password for each parameter passed

for USER_NAME in "${@}"
do 
  PASSWORD=$(date +%s%N | sha256sum | head -c48)
  echo "User and password is ${USER_NAME} : ${PASSWORD}"
done

--------------------- o/p -------------------------------

#sh s1.sh user1 user2 user3 user4
You executed this command after sh : s1.sh
You used . as path to the s1.sh
arguments passed are 4
User and password is user1 : 363c8ef5b78924b56670c6e9df706a940803e3aaacc947b8
User and password is user2 : 871fafeec960f3a142e394bfe1113f0790a670ca3e37a857
User and password is user3 : a3fe6c9312fb79d175bf903d03c92a01a31c244733e1f3ec
User and password is user4 : e520849280d2538c1c60a7e7d8acc99afb0d09cd158ca3a9


So sure enough, the for loop executed 4 time, generated a password and displayed it for the user.


sh s1.sh jason jospeh
You executed this command after sh : s1.sh

You used . as path to the s1.sh
arguments passed are 2
User and password is jason : 7261f957602714b075f72e5c07748eccb043743800cb2a1e
User and password is jospeh : 4a7dfa5c9c9644028a189c73387b99ae12cfee0af07dc172



------------------------------ what if we update * instead of @ -----------------

man bash 
/special parameter

       The shell treats several parameters specially.  These parameters may only be referenced; assignment to them is not allowed.
       *      Expands  to the positional parameters, starting from one.  When the expansion occurs within double quotes, it expands
              to a single word with the value of each parameter separated by the first character of the IFS special variable.  That
              is,  "$*"  is  equivalent to "$1c$2c...", where c is the first character of the value of the IFS variable.  If IFS is
              unset, the parameters are separated by spaces.  If IFS is null, the parameters are joined without intervening separa‐
              tors.
			  
			  
#!/bin/bash

#This script generates a random password for each user specified on the command line

#Display what the user typed on the command line
echo "You executed this command after sh : ${0}"

#Display the path and filename of the script
echo "You used $(dirname ${0}) as path to the $(basename ${0})"

#Tell them how many arguments they passed in 
#(inside script they are parameters , outside they are arguments)
NUMBER_OF_PARAMETERS="${#}"       # or $#
echo "arguments passed are ${NUMBER_OF_PARAMETERS}"

#Make sure they at least supply 1 argument otherwise it stop the process 
if  [[ "${NUMBER_OF_PARAMETERS}" -lt 1 ]]
then 
  echo "USAGE : ${0} and ${#} arguments passed"
  exit 1            #means script was not passed then check echo ${?} it provide non-zero
fi 

#Generate and display a password for each parameter passed

for USER_NAME in "${*}"
do 
  PASSWORD=$(date +%s%N | sha256sum | head -c48)
  echo "User and password is ${USER_NAME} : ${PASSWORD}"
done


o/P:

sh s1.sh  ramu ramesh raju
You executed this command after sh : s1.sh
You used . as path to the s1.sh
arguments passed are 3


User and password is ramu ramesh raju : 3962b6644c150923c2f2491c70364254b4ae6ec57bdd1214

* will consider all arguments as one.

So the for loop only ran one time and generated a password for that one argument.

that's the difference between dollar sign, asterisk and dollar sign at sign.



















