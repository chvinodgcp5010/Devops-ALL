DOCKER COMPOSE & DOCKER SWARM
-------------------------------
Docker Compose is used for "configuring and starting multiple Docker containers on the same host" so you don't have to 
start each container separately. 

You don’t want to deploy each individual container, configure it and then configure everything else to talk to it as well. 
That will get tedious with even three containers. Docker-Compose lets you automate the deployment of multiple containers.

Docker swarm :
------------
is a "container orchestration tool" that allows you to "run and connect containers on multiple hosts".

Kubernetes:
-----------

is a container orchestration tool that is similar to Docker swarm, but has a wider appeal due to its ease of automation and ability to 
handle higher demand.


https://docs.docker.com/compose/install/

https://docs.docker.com/compose/gettingstarted/

Now, Docker Compose is another utility. Like we have docker engine which is to run our container.
And when we install docker engine,we get docker engine, docker CLI.
But Docker Compose is a separate utility that you have to install.

========================================== Docker compose ========================================

Here I have installed docker on ubuntu vm so installing on same.

https://docs.docker.com/engine/install/ubuntu/

Install Compose plugin:

(Mac, Win, Linux) Docker Desktop: 
If you have Desktop installed then you already have the Compose plugin installed.

Linux systems: To install the Docker CLI’s Compose plugins use one of these methods of installation:
=>Using the convenience scripts offered per Linux distro from the Engine install section.
=>Setting up Docker’s repository and using it to install the compose plugin package.

docker Compose is a tool to run multicontainers together.

Like our view profile project.We will be containerizing it.We will be writing docker files for those.
And when we run the container, we know our project containers needs to talk to each other.(Like we had multiple VMs or multiple EC,
two instances or multiple AWS services that talk to each other in the same network.)

Like that when the container is, we will have multiple containers and we need a tool which can run them together and we can manage it 
centrally.

And Docker Compose does that very well.You have multiple containers, you don't need to do docker run docker P, E.(There are so many 
options that we specify while we run the container.And if you have like that six, seven containers to run together, there is a huge 
chance you will make mistakes while running the container.)

Docker Compose, you have a YAML file where you mentioned all the container information and you
said Docker compose up just like vagrant up.(Yes, we can compare Docker Compose with Vagrant, what vagrant is for VMs, same
way Docker Compose is for containers.

Yes, we can compare Docker Compose with Vagrant, what vagrant is for VMs, same way Docker Compose is for containers.

https://docs.docker.com/compose/

-------------------------- docker-compose.yml -----------------------

version: "3.9"  # optional since v1.27.0
services:
  web:
    build: .                                      #build instruction it will build an image 
    ports:
      - "8000:5000"
    volumes:
      - .:/code                                    #bindmount
      - logvolume01:/var/log                       #(Volume mapped here) mount volume to /var/log to container (web)
    links:
      - redis
  redis:
    image: redis
volumes:
  logvolume01: {}                                 #creating volume
  
 -------------------------- ---------------------------------------------
 
Instead of runnig commands (like docker run , docker volume) you are adding in compose and installng 
  
We have a version here, 
services: We have services means containers. So we have two containers here, "web" and "Redis".

Now Redis container, there is an image called Redis.So it will be same as we say 
"docker run -d redis", 

which will run a container from the image Redis with the name redis.

But then we have a "web" container here.You have an option of build and there is a path dot in current working directory.
So this is expecting a docker file in the same directory where you have the compose file.

This "docker-compose.yaml" file in the same place you should have a docker file.
So Build Instruction will build an image from the dockerfile and it will run the container with the name web.
It's going to map the port 8000 with the port 5000 of the container.

And there is a volumes option here.And its value is a list.
------------------------------------------------------------
Two volumes we have, the first one is the "bind mount". 
dot is the host directory.That means the current working directory will be mapped with the container directory /code. 
That's bind mount 

But we have seen volumes where we create volumes separately.And then we map with the container volume.
Like that you have here volumes section where you create a volume with name logvolume01, which creates a volume.

And this volume is mapped here.Now this is the same thing what we do in command line, docker run, docker volumes, those same commands.

Instead of running commands imperative, we are going to put it in all that in docker compose file declarative benefits.

1. first thing is we can avoid a lot of human error.
2.Second, this docker compose file will be part of your repository.

So developer can use this docker compost file to run containers locally or wherever they want.And it will be version control.
Whatever changes you make, everything will be tracked.

Infrastructure as a code.Now there is a very neat exercise with docker compose in the Getting started section here.
  
https://docs.docker.com/compose/gettingstarted/

But before that you have to install the compose. So let's go to install compose.

  
=========================================== INSTALL DOCKER COMPOSE =============================================

https://docs.docker.com/compose/install/
https://docs.docker.com/engine/install/#server

ubuntu@ip-172-31-93-221:~$ cat /etc/os-release
NAME="Ubuntu"
VERSION="18.04.6 LTS (Bionic Beaver)"
ID=ubuntu
ID_LIKE=debian
PRETTY_NAME="Ubuntu 18.04.6 LTS"
VERSION_ID="18.04


My Server is "ubuntu"

https://docs.docker.com/engine/install/ubuntu/
https://docs.docker.com/compose/install/compose-plugin/

install docker and then docker compose

for docker compose:

=>sudo apt-get update
=>sudo apt-get install docker-compose-plugin
  
=>docker compose version
Docker Compose version v2.6.0

=>docker compose --help
    
============================= Get started with Docker Compose =======================================   

https://docs.docker.com/compose/gettingstarted/

Step 1: Setup
==============
Define the application dependencies.

Create a directory for the project:

=>mkdir composetest
=>cd composetest

2.Create a file called app.py in your project directory and paste this in:

vi app.py
===========

import time

import redis
from flask import Flask

app = Flask(__name__)
cache = redis.Redis(host='redis', port=6379)

def get_hit_count():
    retries = 5
    while True:
        try:
            return cache.incr('hits')
        except redis.exceptions.ConnectionError as exc:
            if retries == 0:
                raise exc
            retries -= 1
            time.sleep(0.5)

@app.route('/')
def hello():
    count = get_hit_count()
    return 'Hello World! I have been seen {} times.\n'.format(count)
    
-------------------------------------------------------------------------------------

In this example, redis is the hostname of the redis container on the application’s network. We use the default port for Redis, 6379.

Handling transient errors

Note the way the get_hit_count function is written. This basic retry loop lets us attempt our request multiple times if the redis service is not available. This is useful at startup while the application comes online, but also makes our application more resilient if the Redis service needs to be restarted anytime during the app’s lifetime. In a cluster, this also helps handling momentary connection drops between nodes.

3.Create another file called requirements.txt in your project directory and paste this in:

vi requirements.txt
====================

flask
redis
  

Step 2: Create a Dockerfile
============================

In this step, you write a Dockerfile that builds a Docker image. The image contains all the dependencies the Python application requires,
including Python itself.

In your project directory, create a file named Dockerfile and paste the following:

vi Dockerfile
==============

# syntax=docker/dockerfile:1
FROM python:3.7-alpine
WORKDIR /code
ENV FLASK_APP=app.py
ENV FLASK_RUN_HOST=0.0.0.0
RUN apk add --no-cache gcc musl-dev linux-headers
COPY requirements.txt requirements.txt
RUN pip install -r requirements.txt
EXPOSE 5000
COPY . .
CMD ["flask", "run"]

========================================================

This tells Docker to:

Build an image starting with the Python 3.7 image.
Set the working directory to /code.
Set environment variables used by the flask command.
Install gcc and other dependencies
Copy requirements.txt and install the Python dependencies.
Add metadata to the image to describe that the container is listening on port 5000
Copy the current directory . in the project to the workdir . in the image.
Set the default command for the container to flask run.
For more information on how to write Dockerfiles, see the Docker user guide and the Dockerfile reference.
  

Step 3: Define services in a Compose file
=========================================

Create a file called docker-compose.yml in your project directory and paste the following:

vi docker-compose.yml
------------------------

version: "3.9"
services:
  web:
    build: .
    ports:
      - "8000:5000"
  redis:
    image: "redis:alpine"
    
============================================

This Compose file defines two services: web and redis.

Web service
The web service uses an image that’s built from the Dockerfile in the current directory. It then binds the container and the host machine to the exposed port, 8000. This example service uses the default port for the Flask web server, 5000.
  
  
Redis service
The redis service uses a public Redis image pulled from the Docker Hub registry.

Step 4: Build and run your app with Compose
===============================================
From your project directory, start up your application by running docker-compose up.

 docker-compose up

How to stop container running from Compose.
-------------------------------------------
ubuntu@ip-172-31-93-221:~/composetest$ docker compose stop
[+] Running 1/2
 ⠿ Container composetest-redis-1  Stopped                                                                                        0.2s
 ⠴ Container composetest-web-1    Stopping                                                                                       8.6s
  
  
  
  
  
  
  
