https://github.com/chvinodgcp5010/vprofile-project

branch : Docker

(below it specifically clone docker branch which has dockerfile)
git clone -b docker https://github.com/chvinodgcp5010/vprofile-project.git

cd vprofile-project

https://github.com/chvinodgcp5010/vprofile-project/tree/docker/Docker-files/app


=============================== 1.Without multistage dockerfile (File1) ================================
#In vm it perform all mvn build and store .war in specfic target folder ,so we are copying from local to container (manually)

FROM tomcat:8-jre11
LABEL "Project"="Vprofile"
LABEL "Author"="Imran"

RUN rm -rf /usr/local/tomcat/webapps/*
COPY target/vprofile-v2.war /usr/local/tomcat/webapps/ROOT.war      #Here we are copying (manually)target/vprofile-v2.war 
                                                                    #building from vm and copying artifacts from Vm to container.
EXPOSE 8080
CMD ["catalina.sh", "run"]
WORKDIR /usr/local/tomcat/
VOLUME /usr/local/tomcat/webapps

=============================================EXPLANATION============================================

Here we are running in node and copying artifact from node(vm) to container. but in "multi stage" all 
build at container (stage1) and copy to other container in (stage2)

->This docker file has one problem.

->The problem is it's not completely automated. We have to generate the artifact in this step.
It copies the artifact.

->But this artifact needs to be there in this directory.We need to manually build this artifact.

->We have to do "MVN install" which creates this artifact And then we copy this.
COPY target/vprofile-v2.war /usr/local/tomcat/webapps/ROOT.war

->How about we put the MVN install command build commands in the Dockerfile, 
then we don't need to do it manually right now. Sure, we can do that.



=======================2. Copying .war file using automation (without multistage) Dockerfile ===============================

FROM tomcat:8-jre11
LABEL "Project"="Vprofile"
LABEL "Author"="Imran"

RUN apt update && apt install maven -y && apt install openjdk-8-jdk  -y
git clone -b vp-rem https://github.com/chvinodgcp5010/vprofile-project.git && cd vprofile-project && mvn install

RUN rm -rf /usr/local/tomcat/webapps/*
COPY target/vprofile-v2.war /usr/local/tomcat/webapps/ROOT.war

EXPOSE 8080
CMD ["catalina.sh", "run"]
WORKDIR /usr/local/tomcat/
VOLUME /usr/local/tomcat/webapps

=================================================Explanation =========================================

I'm going to run the git clone command and specifically the branch -b vp-rem this branch we have our source code and then CD into 
the repository.

And then we will say "MVN install". Now for this we also need to have JDK.So I can say here apt.apt update, then apt install, 
openjdk I have given ampersand in here two times and then -y

Okay, so that should do, right?
================================
->But the problem with this is this tomcat image will also have the repository that will add to the storage.Then we have 
"MVN install" which is going to download lots of dependencies that will be also in the image.

->We will have target directory that will contain more than just the artifact.
So we have many things into this image which is not even required.We just interested in the artifact.

->If we do build in the same image,then this image size will be huge in GB's, which will be difficult for shipping.
->It is possible to ship, but the size will be huge and we should have as small footprint as possible for the docker image.
->So now you will say we can go back to our previous method.We can just build the artifact separately
on the host machine and then copy. But then that is manual.

->So we cannot do this and we cannot go with the manual step.

#https://github.com/chvinodgcp5010/vprofile-project/tree/vp-rem.


But before we see multi stage docker file
==========================================

->you don't need to build this image. This is really not the real time.

->Production use cases should not have build and the app image in the same docker file.
Or should I say you should not have build artifact and the artifact in the same image. You should not have this.

->This was just to show you the problem.



CHECK IT BELOW FROM MANUAL BUILD WHERE TO GET WAR FILE (have git , mvn and docker)
==================================================================================

git clone -b vp-docker https://github.com/imranvisualpath/vprofile-repo.git
cd vprofile-repo
mvn install

ubuntu@ip-172-31-93-221:~/vprofile-repo$ ls
Docker-app  Docker-db  Docker-web  README.md  ansible  compose  helm  kubernetes  pom.xml  src  target

ubuntu@ip-172-31-93-221:~/vprofile-repo$ cd target/

ubuntu@ip-172-31-93-221:~/vprofile-repo/target$ ls
classes            generated-test-sources  maven-archiver  site              test-classes  vprofile-v2.war
generated-sources  jacoco.exec             maven-status    surefire-reports  vprofile-v2

check path:
pwd
/target/vprofile-v2.war

================================================== MULTISTAGE Dockerfile ===============================================

# Multistage Dockerfile
#stage1
FROM openjdk:8 AS BUILD_IMAGE
RUN apt update && apt install maven -y
RUN git clone -b vp-docker https://github.com/imranvisualpath/vprofile-repo.git
RUN cd vprofile-repo && mvn install

#stage2
FROM tomcat:8-jre11
RUN rm -rf /usr/local/tomcat/webapps/*
COPY --from=BUILD_IMAGE vprofile-repo/target/vprofile-v2.war /usr/local/tomcat/webapps/ROOT.war      # BUILD_IMAGE (same name as stage1)
EXPOSE 8080
CMD ["catalina.sh", "run"]

====================================BUILD COMMANDS==========================================

cd git clone -b docker https://github.com/devopshydclub/vprofile-project.git
cd vprofile-project/Docker-files/app/
ls
cd multistage/
ls
cat Dockerfile
docker build -t appimg:v1 .
docker images


=================================== Multi stage explanation ==============================

Now we need "maven" to build our artifact. And for "maven" we need "open JDK".
And there is already an open JDK image on docker hub.We can use that

Now, I'm going to give a name to this image and that we do it like this.I'll give the name as "build_image".
So we say fetch this image and give this docker file name as "build image".

And in this one we are going to build our artifact.

-------------
Okay, so three run instruction, 

->app update,app install, maven, clone the source code,
->go into the repository and MVN install.
This will build our artifact. 

You will say what's the difference, it's the same thing.
=======================================================

->Hold on, this is our "build image". But our "app" image will be different.

->So there will be one more instruction now from "tomcat 8-jre11"
And we are going to remove the "default app" from that (RUN rm -rf /usr/local/tomcat/webapps/*)
So that run instruction should remove everything from web apps directory.

->Now, we want to copy our artifact from this "build image" to 'this image'.


COPY --from=BUILD_IMAGE vprofile-repo/target/vprofile-v2.war /usr/local/tomcat/webapps/ROOT.war

->For that we use your "copy" instruction as usual and we see from equal to this "build image".
So copy from this image, copy what all the artifact which will be in this directory.

->We have target and in that we have artifact copied at that location. And then your usual instruction expose on 80,
80 and cmd catalina run on whatever instruction you have, volumes or work directory, anything.

So you see now when we build this image, this will be the output image. This image is just to build the artifact.
And when we copy from the build image, you have to understand this.

->Whatever is the work directory for "open JDK" work directory, it is going to create this repository in that directory.
So let's say it's root directory just slash. So the path will be viewprofile repo.
And in this image, we don't need to specify the work directory here. We can just give the directory inside that or artifact copy to this location.

build the image.So first it is doing the build image.There it's running MVN install and you
see it's downloading so many dependencies.All that will be in the build image.

Let's clear the screen and let's look at docker images.


ubuntu@ip-172-31-93-221:~$ docker images
REPOSITORY                                                   TAG           IMAGE ID       CREATED              SIZE
firstwebsite                                                 latest        ab626d74f4d4   About a minute ago   374MB
<none>                                                       <none>        cd410c135f45   About a minute ago   1.08GB


Okay, now check this.This is our output image and its size is 374 MB.This consists the artifact and this one
where you do not have any name.This is "our build image".

Look at its size.If you do both in the same image,then just add one GB plus 374 MB.
So we reduced the footprint of our app image.And we have also automated the entire build process.

And that is multi stage Dockerfile.So keep this in mind when you work in any project.
Whenever there is a build for any image, appimage, front end, back end, wherever there is build,

you should have a multistage docker file.


============================================ O/P =============================================
docker build -t firstwebsite .
Sending build context to Docker daemon  133.5MB
Step 1/9 : FROM openjdk:8 AS BUILD_IMAGE
 ---> 2a8331246713
Step 2/9 : RUN apt update && apt install maven -y
 ---> Running in b1d517f73df9

WARNING: apt does not have a stable CLI interface. Use with caution in scripts.

Get:1 http://security.debian.org/debian-security bullseye-security InRelease [44.1 kB]



[INFO] Installing /vprofile-repo/target/vprofile-v2.war to /root/.m2/repository/com/visualpathit/vprofile/v2/vprofile-v2.war
[INFO] Installing /vprofile-repo/pom.xml to /root/.m2/repository/com/visualpathit/vprofile/v2/vprofile-v2.pom
[INFO] ------------------------------------------------------------------------
[INFO] BUILD SUCCESS
[INFO] ------------------------------------------------------------------------
[INFO] Total time:  45.110 s
[INFO] Finished at: 2022-07-05T14:45:17Z
[INFO] ------------------------------------------------------------------------
Removing intermediate container d16f8d727ee0
 ---> cd410c135f45
Step 5/9 : FROM tomcat:8-jre11
 ---> f1191d755a83
Step 6/9 : RUN rm -rf /usr/local/tomcat/webapps/*
 ---> Using cache
 ---> c453f5502262
Step 7/9 : COPY --from=BUILD_IMAGE vprofile-repo/target/vprofile-v2.war /usr/local/tomcat/webapps/ROOT.war
 ---> b9f5d38b5738
Step 8/9 : EXPOSE 8080
 ---> Running in 98fa29cc60e1
Removing intermediate container 98fa29cc60e1
 ---> 2d94fa376dcf
Step 9/9 : CMD ["catalina.sh", "run"]
 ---> Running in 746265e0086d
Removing intermediate container 746265e0086d
 ---> ab626d74f4d4
Successfully built ab626d74f4d4
Successfully tagged firstwebsite:latest

====================================== OBSERVE  IMAGE MEMORY USING MULTISTAGE DOCKERFILE ========================================

ubuntu@ip-172-31-93-221:~$ docker images
REPOSITORY                                                   TAG           IMAGE ID       CREATED              SIZE
firstwebsite                                                 latest        ab626d74f4d4   About a minute ago   374MB
<none>                                                       <none>        cd410c135f45   About a minute ago   1.08GB


Here My image "firstwebsite" is using for application 
and <none> is not using anywhere "just build the image" and copied that code to other image











