https://docs.docker.com/engine/reference/builder/

"Dockerfile" contains information to build images.

Just like "pom.xml" file in maven it will build artifact file. here "Dockerfile" going to build an image for that.


WHAT CONTIANS IN DOCKERFILE:
---------------------------
it contains set of instructions and values.

1.FROM
2.LABELS
3.RUN
4.ADD/COPY
5.CMD
6.ENTRYPOINT
7.VOLUME
8.EXPOSE
9.ENV
10.WORKDIR
11.ARG
12.ONBUILD 


************************************************************************************************************************

FROM                          : Specity base image take from dockerhub (take base image and on top of that do customization)

LABELS                        : like key and value pairs  => add metadata to an image (like tags in aws) 
                                like project name and "author name"
                                
RUN                           : Instruct going to make changes (install a package or create a directory)
                                whatever the command you want to execute or make changes that we mention through RUN instruction.
                                
ADD/COPY                      : COPY/ADD files and folders in to image while you are building (like config file and archive)

                       ADD: you can provide link an archive ,it can download from a link and put in image or it can unarchive.
                       COPY: take a file and dump it 

CMD                           : Run binaries/command when docker run . (will set "what binary is executed when docker run")

ENTRYPOINT                    : Similar to CMD but it have "higher priority" . if you mention both together you can mention
                                command in "ENTRYPOINT" and Argument to that command using "CMD"
                                Allows you to configure an container that will run as executable.
                                
VOLUME                        : which volume would You like to export ( like in mysql =>/var/lib/mysql)
                              : Creates a mountpoint and marks it as 
      
EXPOSE                        : container listens at specific port at runtime(lets say nginx 80)
                                mentioning your binary on CMD and "ENTRYPOINT"  binray will create a process and process can bind to 
  port number (like nginx 80 , mysql 3306)so whatever prot process binding to you have to give same on expose.
  Then you can do portmapping when performing docker run.
  
 ENV                           : set env variable
 USER                          : set user name (or UID) to specify what user to running the process
 WORKDIR                       :  set the working directory( when you run docker exec -it <cont> )command that command can run on this WORKDIR
 ARG                           : Defines a variable that users can pass at build time
 ONBUILD                        : adds a image to trigger a instruction to be executed at later time.
  
  
  ************************************************************************************************************************
  


      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
                                
