pipeline {
  agent any 
  stages {
    stage ('fetch the code'){
      steps {
        git branch: 'paac', url: 'https://github.com/chvinodgcp5010/CICD-project-Nexus-and-Sonarqube.git' 
      }
    }
    stage ('build code'){
      steps {
        sh 'mvn install'
      }
    }
    stage ('test code'){
      steps {
        sh 'mvn test'
       }
    }
    stage('build && SonarQube analysis') {
       steps {
            withSonarQubeEnv('sonarqube_server') {                               //the name we gave on "configure system" of sonar server as sonarqube_server.
            // Optionally use a Maven environment you've configured already
            //withMaven(maven:'Maven 3.5') {                                    //If we use maven as tool use withMaven otherwise no need installed maven directly so directly mentioned mvn
            sh 'mvn clean package sonar:sonar'
           }
        }
     }
    stage('Nexus upload') {
       steps {     
          nexusArtifactUploader(
            nexusVersion: 'nexus3',
            protocol: 'http',
            nexusUrl: '3.90.186.173:8081',
            groupId: 'com.visualpathit',                                       // any name
            version: "${env.BUILD_ID}-${env.BUILD_TIMESTAMP}",                                                      
            repository: 'vprofile-vnd',
            credentialsId: 'nexus-cred',
            artifacts: [
               [artifactId: 'vprofile',
                classifier: '',
                file: 'target/vprofile-v2.war',
                type: 'war']
                 ]
               )
             }
          }
        }
}



======================================================= Jenkinsfile2 ==============================================================

pipeline {
    agent any

    stages{
        stage('Fetch code') {
          steps{
              git branch: 'vp-rem', url:'https://github.com/devopshydclub/vprofile-repo.git'
          }  
        }

        stage('Build') {
            steps {
                sh 'mvn clean install -DskipTests'
            }
            post {
                success {
                    echo "Now Archiving."
                    archiveArtifacts artifacts: '**/*.war'
                }
            }
        }
        stage('Test'){
            steps {
                sh 'mvn test'
            }

        }

        stage('Checkstyle Analysis'){
            steps {
                sh 'mvn checkstyle:checkstyle'
            }
        }

        stage('Sonar Analysis') {
            environment {
                scannerHome = tool 'sonar4.7'
            }
            steps {
               withSonarQubeEnv('sonar') {
                   sh '''${scannerHome}/bin/sonar-scanner -Dsonar.projectKey=vprofile \
                   -Dsonar.projectName=vprofile \
                   -Dsonar.projectVersion=1.0 \
                   -Dsonar.sources=src/ \
                   -Dsonar.java.binaries=target/test-classes/com/visualpathit/account/controllerTest/ \
                   -Dsonar.junit.reportsPath=target/surefire-reports/ \
                   -Dsonar.jacoco.reportsPath=target/jacoco.exec \
                   -Dsonar.java.checkstyle.reportPaths=target/checkstyle-result.xml'''
              }
            }
        }

        stage("Quality Gate") {
            steps {
                timeout(time: 1, unit: 'HOURS') {
                    // Parameter indicates whether to set pipeline to UNSTABLE if Quality Gate fails
                    // true = set pipeline to UNSTABLE, false = don't
                    waitForQualityGate abortPipeline: true
                }
            }
        }

        stage("UploadArtifact"){
            steps{
                nexusArtifactUploader(
                  nexusVersion: 'nexus3',
                  protocol: 'http',
                  nexusUrl: '172.31.18.28:8081',
                  groupId: 'QA',
                  version: "${env.BUILD_ID}-${env.BUILD_TIMESTAMP}",
                  repository: 'vprofile-repo',
                  credentialsId: 'nexuslogin',
                  artifacts: [
                    [artifactId: 'vproapp',
                     classifier: '',
                     file: 'target/vprofile-v2.war',
                     type: 'war']
    ]
 )
            }
        }



    }
}
