https://kubernetes.io/docs/concepts/storage/volumes/
https://www.tutorialspoint.com/kubernetes/kubernetes_volumes.htm

Docker has a concept of volumes, though it is somewhat looser and less managed. A Docker volume is a directory on disk or in another container. Docker provides volume drivers, 
but the functionality is somewhat limited.

On-disk files in a container are ephemeral, which presents some problems for non-trivial applications when running in containers. 
One problem is the loss of files when a container crashes. The kubelet restarts the container but with a clean state. 
A second problem occurs when sharing files between containers running together in a Pod. The Kubernetes volume abstraction solves both 
of these problems.

Kubernetes supports many types of volumes. A Pod can use any number of volume types simultaneously. Ephemeral volume types have a
lifetime of a pod, but persistent volumes exist beyond the lifetime of a pod. When a pod ceases to exist, Kubernetes destroys ephemeral 
volumes; however, Kubernetes does not destroy persistent volumes. For any kind of volume in a given pod, data is preserved across 
container restarts.

At its core, a volume is a directory, possibly with some data in it, which is accessible to the containers in a pod. How that 
directory comes to be, the medium that backs it, and the contents of it are determined by the particular volume type used.

To use a volume, specify the volumes to provide for the Pod in .spec.volumes and declare where to mount those volumes into containers 
in .spec.containers[*].volumeMounts. A process in a container sees a filesystem view composed from the initial contents of the container
image, plus volumes (if defined) mounted inside the container. The process sees a root filesystem that initially matches the contents of 
the container image. Any writes to within that filesystem hierarchy, if allowed, affect what that process views when it performs a 
subsequent filesystem access. Volumes mount at the specified paths within the image. For each container defined within a Pod, you must
independently specify where to mount each volume that the container uses.


configMap
A ConfigMap provides a way to inject configuration data into pods. The data stored in a ConfigMap can be referenced in a volume of type 
configMap and then consumed by containerized applications running in a pod.

When referencing a ConfigMap, you provide the name of the ConfigMap in the volume. You can customize the path to use for a specific 
entry in the ConfigMap. The following configuration shows how to mount the log-config ConfigMap onto a Pod called configmap-pod:


==============================================================================
apiVersion: v1
kind: Pod
metadata:
  name: configmap-pod
spec:
  containers:
    - name: test
      image: busybox:1.28
      volumeMounts:
        - name: config-vol
          mountPath: /etc/config
  volumes:
    - name: config-vol
      configMap:
        name: log-config
        items:
          - key: log_level
            path: log_level
            
            
The log-config ConfigMap is mounted as a volume, and all contents stored in its log_level entry are mounted into the Pod at path 
/etc/config/log_level. Note that this path is derived from the volume's mountPath and the path keyed with log_level.


https://kubernetes.io/docs/tasks/configure-pod-container/configure-pod-configmap/

vi 

==================================================================
vim mysqlpod.yaml

apiVersion: v1
kind: Pod
metadata:
  name: dbpod
spec:
  containers:
  - image: mysql:5.7
    name: mysql
    volumeMounts:
    - mountPath: /var/lib/mysql
      name: dbvol
  volumes:
  - name: dbvol
    hostPath:
      # directory location on host
      path: /data
      # this field is optional
      type: DirectoryOrCreate



kubectl apply -f mysqlpod.yaml
kubectl get pod
kubectl describe pod dbpod
ls
clear
vim mysqlpod.yaml
kubectl delete pod dbpod
kubectl apply -f mysqlpod.yaml
kubectl describe pod dbpod
clear
kubectl delete pod dbpod

================================= 

https://www.tutorialspoint.com/kubernetes/kubernetes_volumes.htm

Types of Kubernetes Volume
Here is a list of some popular Kubernetes Volumes −

=>emptyDir − It is a type of volume that is created when a Pod is first assigned to a Node. It remains active as long as the Pod is 
running on that node. The volume is initially empty and the containers in the pod can read and write the files in the emptyDir volume. 
Once the Pod is removed from the node, the data in the emptyDir is erased.

=>hostPath − This type of volume mounts a file or directory from the host node’s filesystem into your pod.

=>gcePersistentDisk − This type of volume mounts a Google Compute Engine (GCE) Persistent Disk into your Pod. The data in a 
gcePersistentDisk remains intact when the Pod is removed from the node.

=>secret − A secret volume is used to pass sensitive information, such as passwords, to pods.

=>persistentVolumeClaim − A persistentVolumeClaim volume is used to mount a PersistentVolume into a pod. PersistentVolumes are a
way for users to “claim” durable storage (such as a GCE PersistentDisk or an iSCSI volume) without knowing the details of the particular
cloud environment.

































