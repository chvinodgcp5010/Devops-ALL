SECRETS:
========
https://kubernetes.io/docs/concepts/configuration/secret/
https://kubernetes.io/docs/tasks/configure-pod-container/pull-image-private-registry/

Share encoded/encrypted variables to pod
(Store and manage sensitive information such as passwords)

Configmap:
==========
Will stores variables or files in clear text.

If you store things like password or docker registry credentials which you will inject on pod definition files.
Then these info which are sensitive (like pwd) will be in clear text in your repo. because all definition files we store in central repo.
(git repo)

whosever have access to git repo can see pwd in clear text. ====> It is very bad approach

-> So you can store variable encode / encrypt then you can inject safely in your pod.

https://kubernetes.io/docs/tasks/configure-pod-container/pull-image-private-registry/
https://kubernetes.io/docs/concepts/configuration/secret/

# Encode text

echo -n "admin" | base64                                          #  YWRtaW4=           #encoded value of admin
echo -n "mysecretpass" | base64                                   #  bXlzZWNyZXRwYXNz


#decode text

echo -n "YWRtaW4=" | base64 --decode
admin

echo -n "bXlzZWNyZXRwYXNz" | base64 --decode
mysecretpass


SECRET:
=======
How was it safe ? if anybody can deocode it , It will be stored to k8s controle plane so if you have access can get the value and 
decode it.but  It's good practice to avoid accidental exposure.

If you want to encrypt the data you can use "encryption keys" and you can encyrpt data as well.

There is no method to encrypt the data in k8s.



CREATE SECRETS USING IMPERATIVE APPROACH:
========================================

for non production only for production use create a file and apply it.

https://kubernetes.io/docs/tasks/configmap-secret/managing-secret-using-kubectl/

create files using below or create it using vi editor.

echo -n "admin" > ./username.txt
echo -n "1f34435" > ./password.txt

================= create secret using file (imperative approach) for non production only ==============================

kubectl create secret generic db-user-pass \
  --from-file=./username.txt \
  --from-file=./password.txt
  
 
=========================== create secret using literal ==============================

kubectl create secret generic db-user-pass \
  --from-literal=username=devuser \
  --from-literal=password='S!B\*d$zDsb='
  
O/P:

vinodch501@cloudshell:~ (geometric-sled-348110)$ kubectl get secret db-user-pass -o yaml
apiVersion: v1
data:
  password: UyFCXCpkJHpEc2I9
  username: ZGV2dXNlcg==
  
================================== Create secret using literal ======================================
  
=>kubectl create secret my-db-vnd --from-literal=db_password=somecomplexpassword

=>kubectl get secret my-db-vnd -o yaml

apiVersion: v1
data:
  db_password: c29tZWNvbXBsZXhwYXNzd29yZA==
kind: Secret
metadata:
  creationTimestamp: "2022-06-21T07:15:54Z"
  name: my-db-vnd
  namespace: default
  resourceVersion: "3114075"
  uid: 91bda72c-1c9b-4735-a5e7-980a3b299947
type: Opaque


Decode here and check :
=======================

https://www.base64decode.org/

c29tZWNvbXBsZXhwYXNzd29yZA==

o/p:

somecomplexpassword
  
===================================== Create secret using literal ===============================

kubectl create secret generic db-user-pass \
  --from-literal=username=devuser \
  --from-literal=password='vinoddevops='
  
=>
$ kubectl get secret db-user-pass -o yaml

apiVersion: v1
data:
  password: dmlub2RkZXZvcHM9
  username: ZGV2dXNlcg==
kind: Secret
metadata:
  creationTimestamp: "2022-06-21T07:17:48Z"
  name: db-user-pass
  namespace: default
  resourceVersion: "3114776"
  uid: b02d87fb-d765-48e6-b82e-325372e2c6fc
type: Opaque
  
  
 NOTE:
 =====
 In above we have provide as plain text but its storing encoded format of data using (Imperative manner)
 
 
 ==================================== DECLARATIVE (STANDARD) APPROACH ===============================
 
 You have to first encode your data and the value that we need to give encode data otherwise there is no point.
 
  data:
  username: YWRtaW4=
  password: bXlzZWNyZXRwYXNz
 
 
==================================== SECRET YAML FILE USING DECLARATIVE APPROACH =============================

# Create Secret

vim mysecret.yaml

apiVersion: v1
kind: Secret
metadata:
  name: mysecret
data:
  username: YWRtaW4=
  password: bXlzZWNyZXRwYXNz
type: Opaque

======================================== POD YAML FILE ===========================

kubectl create -f mysecret.yaml

# Create Pod to read secret keys

vim readsecret.yaml

apiVersion: v1
kind: Pod
metadata:
  name: secret-env-pod
spec:
  containers:
  - name: mycontainer
    image: redis
    env:
      - name: SECRET_USERNAME
        valueFrom:
          secretKeyRef:
            name: mysecret
            key: username
            optional: false # same as default; "mysecret" must exist # and include a key named "username"
                            
      - name: SECRET_PASSWORD
        valueFrom:
          secretKeyRef:
            name: mysecret
            key: password
            optional: false # same as default; "mysecret" must exist  # and include a key named "password"
                         
  restartPolicy: Never



====================================If you want to add multiple secrets you can use below (envFrom) ===============================

if you have multiple keys in secret and you want to export all of them use "envFrom"

    envFrom:                                
     - secretRef:                                     # in configmap (configmapref)
         name: db-secret
         
===================================

apiVersion: v1
kind: Pod
metadata:
  name: secret-env-pod
spec:
  containers:
  - name: mycontainer
    image: redis
    envFrom:                                
     - secretRef:                                     # in configmap (configmapref)
         name: db-secret


====================================If you want to add selective(keys)in secrets you can use below (env) ===============================

If you have multiple keys in secrets and you need selective keys use env:

    env:
      - name: SECRET_USERNAME
        valueFrom:
          secretKeyRef:
            name: mysecret
            key: username
          
          
=====================
apiVersion: v1
kind: Pod
metadata:
  name: secret-env-pod
spec:
  containers:
  - name: mycontainer
    image: redis
    env:
      - name: SECRET_USERNAME
        valueFrom:
          secretKeyRef:
            name: mysecret
            key: username
            optional: false # same as default; "mysecret" must exist # and include a key named "username"
                            
      - name: SECRET_PASSWORD
        valueFrom:
          secretKeyRef:
            name: mysecret
            key: password
            optional: false # same as default; "mysecret" must exist  # and include a key named "password"
                         
  restartPolicy: Never

=======================================================================================

kubectl create -f readsecret.yaml
kubectl get pod

=>if you provide encryption also in pod yaml it will store as "plain text" in kubernetes pod

$ kubectl exec -it secret-env-pod /bin/sh

# echo $SECRET_USERNAME
admin
# echo $SECRET_PASSWORD
mysecretpass

# Login to Pod echo print variables
kubectl exec --stdin --tty secret-env-pod -- /bin/bash
