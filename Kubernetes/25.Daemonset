https://kubernetes.io/docs/concepts/workloads/controllers/daemonset/

A DaemonSet ensures that all (or some) Nodes run a copy of a Pod. As nodes are added to the cluster, Pods are added to them. 
As nodes are removed from the cluster, those Pods are garbage collected. Deleting a DaemonSet will clean up the Pods it created.

Some typical uses of a DaemonSet are:

running a cluster storage daemon on every node
running a logs collection daemon on every node
running a node monitoring daemon on every node

Daemonset similar to deployment , it runs pod ( pod run containers) in deployment . in daemonset also we have  replicas but based on 
no of worker nodes.

Use daemonset for collecting logs and monitoring nodes these also not directly some readymade solutions like "prometheus"
grafana and fluentd which collects logs and metrics

kubectl get daemonset -A

NAMESPACE     NAME                           DESIRED   CURRENT   READY   UP-TO-DATE   AVAILABLE   NODE SELECTOR                                                        AGE
kube-system   fluentbit-gke                  2         2         2       2            2           kubernetes.io/os=linux                                               12d
kube-system   fluentbit-gke-256pd            0         0         0       0            0           kubernetes.io/os=linux                                               12d


Here we have 2 nodes (so we have 2 pods of )fluentbit-gke but below only 0 . 
depends on how we configured daemonset 

================================= daemonset =======================================

apiVersion: apps/v1
kind: DaemonSet
metadata:
  name: fluentd-elasticsearch
  namespace: kube-system
  labels:
    k8s-app: fluentd-logging
spec:
  selector:
    matchLabels:
      name: fluentd-elasticsearch
  template:
    metadata:
      labels:
        name: fluentd-elasticsearch
    spec:
      tolerations:
      # these tolerations are to have the daemonset runnable on control plane nodes
      # remove them if your control plane nodes should not run pods
      - key: node-role.kubernetes.io/control-plane                    # 
        operator: Exists
        effect: NoSchedule
      - key: node-role.kubernetes.io/master
        operator: Exists
        effect: NoSchedule
      containers:
      - name: fluentd-elasticsearch
        image: quay.io/fluentd_elasticsearch/fluentd:v2.5.2
        resources:
          limits:
            memory: 200Mi
          requests:
            cpu: 100m
            memory: 200Mi
        volumeMounts:
        - name: varlog
          mountPath: /var/log
        - name: varlibdockercontainers
          mountPath: /var/lib/docker/containers
          readOnly: true
      terminationGracePeriodSeconds: 30
      volumes:
      - name: varlog
        hostPath:
          path: /var/log
      - name: varlibdockercontainers
        hostPath:
          path: /var/lib/docker/containers
          
  
          
  ===============================
  
      tolerations:
      # these tolerations are to have the daemonset runnable on control plane nodes
      # remove them if your control plane nodes should not run pods
      - key: node-role.kubernetes.io/control-plane                    # 
        operator: Exists
        effect: NoSchedule
      - key: node-role.kubernetes.io/master
        operator: Exists
        effect: NoSchedule
          
          
Here if     key: node-role.kubernetes.io/control-plane 
      
      if node has this key (master node is tainted with key) and effect: noschedule its going to run on master node.
  if not provide any key by default master node is tainted and no pod will execute on it. if you have tolerations then only it runs on 
  master node.
  
  If node is tainted then we need toleration only on pod spec otherwise it will not allow the pods to deploy on node.
  
  taint ( on node ) toleration (on pods)
  
  
          
          
          
          
          
          
          
          
          
          
          
          
          

