install Intellij IDE to write yaml files easy to write .

https://www.jetbrains.com/idea/download/#section=windows


========================= Deploy web application on EKS k8s cluster (AWS) ===============

web application is "containerised"  and tested and you want to host for web application

we have multi-tier web application stack
containerised
tested it
want to host for production

RUNNIG CONTAINERS FOR PRODUCTION : REQUIREMENT
===============================================

High availabilty ( containers dont go down and also HA on compute node)
Fault tolerance ( if sth happens on container and not responding it should also autoheal)
Easily scalable ( convenient to scale containers and resource which containers  are running)
platform independant
portable and flexible

=============JAVA STACK APPLICATION DEPLOY TO PRODUCTIN ================

1.k8s cluster
2.containerised appn (vprofile) =>image

we have mysql application and it stores data on "persisten data" for that we are creating "ebs volume" for DB pod
label node with zone name ( we need to run EBS volume where the same zone node deployed)


============================================ IN AWS ===================================================

CREATE EBS VOLUME:
=================

https://kubernetes.io/docs/concepts/storage/volumes/

awsElasticBlockStore

=>aws ec2 create-volume --availability-zone=us-east-2a --size=3 --volume-type=gp2          #here size=3 (3 gb)

save volume id "vol-674r4r888"

CREATE A LABEL ON NODE:
=======================

kubectl get no --show-labels            (you have existing label if you want create new label)

kubectl get no
kubectl describe no node1 |grep -i us-east-2a
kubectl label no node1 zone=us-east-2a

========================================= CODE OVERVIEW ========================================

https://github.com/chvinodgcp5010/vprofile-project/tree/kube-app/

https://github.com/chvinodgcp5010/vprofile-project/tree/kube-app/kubernetes/vpro-app


The below  images created using Dockerfile as below
=====================================================

branch :docker

https://github.com/chvinodgcp5010/vprofile-project/tree/docker/Docker-files

For containeration we need image path:

https://hub.docker.com/r/vprofile/vprofileapp
=>docker pull vprofile/vprofileapp:V1

https://hub.docker.com/r/vprofile/vprofiledb
=>docker pull vprofile/vprofiledb:V1


================= Dockerfile (APP) =================

FROM tomcat:8-jre11
LABEL "Project"="Vprofile"
LABEL "Author"="Imran"

RUN rm -rf /usr/local/tomcat/webapps/*
COPY target/vprofile-v2.war /usr/local/tomcat/webapps/ROOT.war

EXPOSE 8080
CMD ["catalina.sh", "run"]
WORKDIR /usr/local/tomcat/
VOLUME /usr/local/tomcat/webapps


================= Dockerfile (DB)  ================


FROM mysql:5.7.25
LABEL "Project"="Vprofile"
LABEL "Author"="Imran"

ENV MYSQL_ROOT_PASSWORD="vprodbpass"
ENV MYSQL_DATABASE="accounts"


ADD db_backup.sql docker-entrypoint-initdb.d/db_backup.sql


======================================== application.properties ============================================

https://github.com/chvinodgcp5010/vprofile-project/tree/kube-app

https://github.com/chvinodgcp5010/vprofile-project/tree/kube-app/src/main/resources/application.properteis

NOTE:

Here we have copied .war (artifact).
This artifact is generated at target/vprofile-v2.war and it has application.properteis from our source code.

COPY target/vprofile-v2.war /usr/local/tomcat/webapps/ROOT.war

=>When continer comes up from the image it will have this application.properties file. it looks for the backend services with name

vprodb
username: root
password: vprodbpass

rabbitmq:
============
address=vpromq01
username=guest
password=guest

memcached:
==========
host=vprocache01

Also notedown the port numbers , these are important information to collect before writing manifest files, because these information 
we need to define these information so our applications can access to backend  services.

Here we are mentioning sensitive information 

rabbitmq.password=guest
jdbc.password=vprodbpass

it will not be like ideal , put these pwd in to text format 
=>so fist you need to encode this password with secret and then from our pod definition we can access these encoded passwords.


https://github.com/devopshydclub/vprofile-project/blob/docker/src/main/resources/application.properties

===================== application.properties =============================

#JDBC Configutation for Database Connection
jdbc.driverClassName=com.mysql.jdbc.Driver
jdbc.url=jdbc:mysql://vprodb:3306/accounts?useUnicode=true&characterEncoding=UTF-8&zeroDateTimeBehavior=convertToNull   # vprodb: db service
jdbc.username=root
jdbc.password=vprodbpass

#Memcached Configuration For Active and StandBy Host
#For Active Host
memcached.active.host=vprocache01                                 # memcache service "vprocache01"
memcached.active.port=11211
#For StandBy Host
memcached.standBy.host=vprocache02
memcached.standBy.port=11211

#RabbitMq Configuration
rabbitmq.address=vpromq01                                         #rabbitmq service "vpromq01   "
rabbitmq.port=15672
rabbitmq.username=guest
rabbitmq.password=guest

#Elasticesearch Configuration
elasticsearch.host =vprosearch01
elasticsearch.port =9300
elasticsearch.cluster=vprofile
elasticsearch.node=vprofilenode

====================================== 1.CREATE SECRET =====================================

https://github.com/chvinodgcp5010/vprofile-project/tree/kube-app
https://github.com/chvinodgcp5010/vprofile-project/tree/kube-app/kubernetes/vpro-app

app-secret.yml

apiVersion: v1
kind: Secret
metadata:
  name: app-secret
type: Opaque
data:
  db-pass: dnByb2RicGFzcw== 
  rmq-pass: Z3Vlc3Q=

======================================
echo -n "vprodbpass" |base64
dnByb2RicGFzcw==

echo -n "guest" |base64
Z3Vlc3Q=


=================================== 2.CREATE PVC ==========================================

https://kubernetes.io/docs/concepts/storage/persistent-volumes/
PersistentVolumeClaims

kubectl get storageclass

NAME                 PROVISIONER             RECLAIMPOLICY   VOLUMEBINDINGMODE      ALLOWVOLUMEEXPANSION   AGE
premium-rwo          pd.csi.storage.gke.io   Delete          WaitForFirstConsumer   true                   13d
standard (default)   kubernetes.io/gce-pd    Delete          Immediate              true                   13d
standard-rwo         pd.csi.storage.gke.io   Delete          WaitForFirstConsumer   true                   13d



apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: my-pvclaim
spec:
  accessModes:
    - ReadWriteOnce
  volumeMode: Filesystem
  resources:
    requests:
      storage: 8Gi
  storageClassName: standard


kubectl get pvc

NAME         STATUS   VOLUME                                     CAPACITY   ACCESS MODES   STORAGECLASS   AGE
my-pvclaim   Bound    pvc-0a7fbf1a-0f0a-4f72-bfad-7fb74118dd89   8Gi        RWO            standard       62s

======================================= 3.DB Deployment & service yaml file ==========================================

https://github.com/chvinodgcp5010/vprofile-project/blob/kube-app/kubernetes/vpro-app/vprodbdep.yml

apiVersion: apps/v1
kind: Deployment
metadata:
  name: vprodb
  labels:
    app: vprodb                            # label for service definition file (service routes with this label)
spec:
  selector:
    matchLabels:
      app: vprodb
  replicas: 1
  template:
    metadata:
      labels:
        app: vprodb
    spec:
      containers:
      - name: vprodb
        image: vprofile/vprofiledb:V1
        args:
         - "--ignore-db-dir=lost+found"                  
        volumeMounts:
        - mountPath: /var/lib/mysql
          name: vpro-db-data
        ports:
        - name: vprodb-port
          containerPort: 3306
        env:                                               # env variable to pick mysql pwd
         - name: MYSQL_ROOT_PASSWORD
           valueFrom:
             secretKeyRef:
               name: app-secret
               key: db-pass
      #nodeSelector:                                        # because we have created EBS vlolume on this zone so mention same
      #  zone: us-east-2b                                   # node running in this node we create label already (kubectl get no --show-labels)
      volumes:
         - name: vpro-db-data
           persistentVolumeClaim:
              claimName: my-pvclaim
        
        # This AWS EBS volume must already exist.
        #  awsElasticBlockStore:
        #     volumeID: vol-0cf3d659eba6861d4
        #     fsType: ext4       


============= DB Service ===============

apiVersion: v1
kind: Service
metadata:                                 
   name: vprodb        
spec:
  selector:
     app: vprodb                           
  ports:
   - protocol: TCP
     port: 3306                            
     targetPort:  3306                     
  type: ClusterIP                          # by default k8s will create clusterip so no need to mention


================================= Explanation of db yaml files ===============================

metadata:
   name: vprodb
   
# service name (vprodb) is important 

**all of this service defintion files is based on "application.properties" for an appn.
so service name should match application.properties

https://github.com/chvinodgcp5010/vprofile-project/blob/kube-app/src/main/resources/application.properties

jdbc.url=jdbc:mysql://vprodb:3306/accounts?useUnicode=true&characterEncoding=UTF-8&zeroDateTimeBehavior=convertToNull

here vprodb:3306 

# as per the application.properties service name must be "vprodb" if name is different you need to change in application.properties files.

vprodb : name of the service of db

service should accept the request using name of service and port and send it to the db pod.

Service Spec 
=============

spec:
  selector:
     app: vprodb  
     
Deployment spec:
=================
https://github.com/chvinodgcp5010/vprofile-project/blob/kube-app/kubernetes/vpro-app/vprodbdep.yml

spec:
  selector:
    matchLabels:
      app: vprodb
  replicas: 1
  template:
    metadata:
      labels:
        app: vprodb


Service spec must match with DB deployment spec labels.

=========================================
#port: 3306 

#vprodb-port mentioned in deployment, you can give any name mentioned in deployment or port mentioned in deployment.
#"port" will accept request from 3306 and send its backend to "targetPort":  3306 

# you can provide any port for "port" but targetPort must be same mentioned in deployment.

#for better understanding we are providing same port for frontend and backend.


====================================== 4. Memcached deployment yaml file ============================================

https://github.com/chvinodgcp5010/vprofile-project/blob/kube-app/kubernetes/vpro-app/mcdep.yml

apiVersion: apps/v1
kind: Deployment
metadata:
  name: vpromc
  labels:
    app: vpromc
spec:
  selector:
    matchLabels:
      app: vpromc
  replicas: 1
  template:
    metadata:
      labels:
        app: vpromc
    spec:
      containers:
      - name: vpromc
        image: memcached
        ports:
        - name: vpromc-port
          containerPort: 11211
          
================== Service ====================
 
apiVersion: v1
kind: Service
metadata:
  name: vprocache01                            # service name must match with application.properties file 
spec:
  ports:
  - port: 11211
    targetPort: vpromc-port
    protocol: TCP
  selector:
    app: vpromc 
  type: ClusterIP
  
  
======================================================  
  
https://github.com/chvinodgcp5010/vprofile-project/blob/kube-app/src/main/resources/application.properties
  
#Memcached Configuration For Active and StandBy Host
#For Active Host
memcached.active.host=vprocache01
memcached.active.port=11211
#For StandBy Host
memcached.standBy.host=vprocache02
memcached.standBy.port=11211


metadata:
  name: vprocache01                       #memcached.active.host=vprocache01

service runnint with this name(vprocache01) and listening on request 11211 


====================================== 5. RABBITMQ DEPLOYMENT YAML FILE ======================================

apiVersion: apps/v1
kind: Deployment
metadata:
  name: vpromq01
  labels:
    app: vpromq01
spec:
  selector:
    matchLabels:
      app: vpromq01
  replicas: 1
  template:
    metadata:
      labels:
        app: vpromq01
    spec:
      containers:
      - name: vpromq01
        image: rabbitmq
        ports:
        - name: vpromq01-port
          containerPort: 15672
        env: 
         - name: RABBITMQ_DEFAULT_PASS
           valueFrom:
             secretKeyRef:
               name: app-secret
               key: rmq-pass
         - name: RABBITMQ_DEFAULT_USER
           value: "guest"

======================= Service yaml file =======================

apiVersion: v1
kind: Service
metadata:
  name: vpromq01
spec:
  ports:
  - port: 15672
    targetPort: vpromq01-port
    protocol: TCP
  selector:
    app: vpromq01
  type: ClusterIP


======================================================  
  
https://github.com/chvinodgcp5010/vprofile-project/blob/kube-app/src/main/resources/application.properties

#RabbitMq Configuration
rabbitmq.address=vpromq01
rabbitmq.port=15672
rabbitmq.username=guest
rabbitmq.password=guest


here in service name 

metadata:
  name: vpromq01                ===== > must match with "rabbitmq.address=vpromq01"


===========================================6. Vproapp deployment definition yaml (tomcat) ===========================================

https://github.com/chvinodgcp5010/vprofile-project/blob/docker/Docker-files/web/Dockerfile

https://hub.docker.com/r/vprofile/vprofileweb

Dockerfile

FROM nginx
LABEL "Project"="Vprofile"
LABEL "Author"="Imran"

RUN rm -rf /etc/nginx/conf.d/default.conf
COPY nginvproapp.conf /etc/nginx/conf.d/vproapp.conf


======================== Deployment ====================

apiVersion: apps/v1
kind: Deployment
metadata:
  name: vproapp
  labels: 
    app: vproapp
spec:
  replicas: 1
  selector:
    matchLabels:
      app: vproapp
  template:
    metadata:
      labels:
        app: vproapp
    spec:
      containers:
      - name: vproapp
        image: vprofile/vprofileapp:V1 
        ports:
        - name: vproapp-port
          containerPort: 8080
      initContainers:
      - name: init-mydb
        image: busybox
        command: ['sh', '-c', 'until nslookup vprodb; do echo waiting for mydb; sleep 2; done;']
      - name: init-memcache
        image: busybox
        command: ['sh', '-c', 'until nslookup vprocache01; do echo waiting for mydb; sleep 2; done;']


========================== LB- service =============================

apiVersion: v1
kind: Service
metadata:
  name: vproapp-service
spec:
  ports:
  - port: 80
    targetPort: vproapp-port
    protocol: TCP
  selector:
    app: vproapp
  type: LoadBalancer

========================================================================
deployed db deployment but not deployed service of "vprodb" or "vprocache01" and deploy above vproapp and observe 

NAME                        READY   STATUS     RESTARTS   AGE
vproapp-cd7c56d4f-p959h     0/1     Init:0/2   0          3m50s
vprodb-7f48679c86-ztqbs     1/1     Running    0          10m


kubectl get po
vproapp-cd7c56d4f-rdmj2     0/1     Init:0/2   0          4s

kubectl logs -f vproapp-cd7c56d4f-rdmj2

Defaulted container "vproapp" out of: vproapp, init-mydb (init), init-memcache (init)
Error from server (BadRequest): container "vproapp" in pod "vproapp-cd7c56d4f-p959h" is waiting to start: PodInitializing

kubectl describe po vproapp-cd7c56d4f-rdmj2

  Type    Reason     Age    From               Message
  ----    ------     ----   ----               -------
  Normal  Scheduled  2m35s  default-scheduler  Successfully assigned default/vproapp-cd7c56d4f-p959h to gke-tcscluster-default-pool-0decad12-s926
  Normal  Pulling    2m35s  kubelet            Pulling image "busybox"
  Normal  Pulled     2m35s  kubelet            Successfully pulled image "busybox" in 143.650275ms
  Normal  Created    2m35s  kubelet            Created container init-mydb
  Normal  Started    2m35s  kubelet            Started container init-mydb
  
  
 it is executed script and checking for "vprodb" service and other service :
 
 If any of the service is not deployed it will not execute further step ( it checks only service not deployment)
  
  
====================== EXPLANATION ===================
      containers:
      - name: vproapp
        image: vprofile/vprofileapp:V1 
        ports:
        - name: vproapp-port
          containerPort: 8080
      initContainers:
      - name: init-mydb
        image: busybox
        command: ['sh', '-c', 'until nslookup vprodb; do echo waiting for mydb; sleep 2; done;']
      - name: init-memcache
        image: busybox
        command: ['sh', '-c', 'until nslookup vprocache01; do echo waiting for mydb; sleep 2; done;']
        
 
All deployments so far is single container in them , in this we have multi pod

1 normal container will deploy with this image (vprofile/vprofileapp:V1) and other 2 giving "init container"

I want the db container create first then only should create appn pod. 
So i am writing shellscript to execute from busybox image it checks the db if its deployed then only exxectue main container.


      initContainers:
      - name: init-mydb
        image: busybox
        command: ['sh', '-c', 'until nslookup vprodb; do echo waiting for mydb; sleep 2; done;']
      - name: init-memcache
        image: busybox
        command: ['sh', '-c', 'until nslookup vprocache01; do echo waiting for mydb; sleep 2; done;']
 

I want Container should create from this image(busybox) and should run the command for me.

Here 

      initContainers:
      - name: init-mydb
        image: busybox
        command: ['sh', '-c', 'until nslookup vprodb; do echo waiting for mydb; sleep 2; done;']
  
  
It execute first "init container" , once the container work is complete the container will dead ,then it will launch 
"vprofile/vprofileapp:V1 " container.
Main container is halted as long as to finish the init container.

Script:

Executing bash "until" loop

command: ['sh', '-c', 'until nslookup vprodb; do echo waiting for mydb; sleep 2; done;']

until nslookup vprodb; do echo waiting for mydb

=>This Init container work is to check db service  
=>as long as the loop does not return "true"(means found vprodb service) this loop will continuously running , while its running 
it it print a message "do echo waiting for mydb and sleep 2 seconds"

Every 2 seconds it run " nslookup vprodb" if doesnot return any value ( like false) it will execute loop till it's true.


Once the shell script of Init container is succssful then this "Init container will dead" and main container will be launch.



Login with Lb-service and craete an account and check if it works (everything is working fine) like connecting to db and rabbitmq 
etc.

Once you login it verify with db and login successful.
check rabbitmq on "UI" , "all users"from memcache 


Hence production grade k8s cluster is completed


created user 
vinodkumarch
pwd: 12345678 


able to login as well using username and pwd ( means its storing user data and pwd on DB )

delete db pod and try to login "you will not able to login" you will get some exceptions "Your username and password is invalid."

try to add db deployment and check with user details to login " able to login" means user data stroing in db 
(application is connecting to db) and able to login.


================= Dockerfile (DB)  ================


FROM mysql:5.7.25
LABEL "Project"="Vprofile"
LABEL "Author"="Imran"

ENV MYSQL_ROOT_PASSWORD="vprodbpass"
ENV MYSQL_DATABASE="accounts"


ADD db_backup.sql docker-entrypoint-initdb.d/db_backup.sql

=========================================================

cat db_backup.sql


-- MySQL dump 10.13  Distrib 5.7.18, for Linux (x86_64)
--
-- Host: localhost    Database: accounts
-- ------------------------------------------------------
-- Server version	5.7.18-0ubuntu0.16.10.1

/*!40101 SET @OLD_CHARACTER_SET_CLIENT=@@CHARACTER_SET_CLIENT */;
/*!40101 SET @OLD_CHARACTER_SET_RESULTS=@@CHARACTER_SET_RESULTS */;
/*!40101 SET @OLD_COLLATION_CONNECTION=@@COLLATION_CONNECTION */;
/*!40101 SET NAMES utf8 */;
/*!40103 SET @OLD_TIME_ZONE=@@TIME_ZONE */;
/*!40103 SET TIME_ZONE='+00:00' */;
/*!40014 SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0 */;
/*!40014 SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0 */;
/*!40101 SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='NO_AUTO_VALUE_ON_ZERO' */;
/*!40111 SET @OLD_SQL_NOTES=@@SQL_NOTES, SQL_NOTES=0 */;

--
-- Table structure for table `role`
--

DROP TABLE IF EXISTS `role`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `role` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `name` varchar(45) DEFAULT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=2 DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `role`
--

LOCK TABLES `role` WRITE;
/*!40000 ALTER TABLE `role` DISABLE KEYS */;
INSERT INTO `role` VALUES (1,'ROLE_USER');
/*!40000 ALTER TABLE `role` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `user`
--

DROP TABLE IF EXISTS `user`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `user` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `username` varchar(255) DEFAULT NULL,
  `userEmail` varchar(255) DEFAULT NULL,
  `profileImg` varchar(255) DEFAULT NULL,
  `profileImgPath` varchar(255) DEFAULT NULL,
  `dateOfBirth` varchar(255) DEFAULT NULL,
  `fatherName` varchar(255) DEFAULT NULL,
  `motherName` varchar(255) DEFAULT NULL,
  `gender` varchar(255) DEFAULT NULL,
  `maritalStatus` varchar(255) DEFAULT NULL,
  `permanentAddress` varchar(255) DEFAULT NULL,
  `tempAddress` varchar(255) DEFAULT NULL,
  `primaryOccupation` varchar(255) DEFAULT NULL,
  `secondaryOccupation` varchar(255) DEFAULT NULL,
  `skills` varchar(255) DEFAULT NULL,
  `phoneNumber` varchar(255) DEFAULT NULL,
  `secondaryPhoneNumber` varchar(255) DEFAULT NULL,
  `nationality` varchar(255) DEFAULT NULL,
  `language` varchar(255) DEFAULT NULL,
  `workingExperience` varchar(255) DEFAULT NULL,
  `password` varchar(255) DEFAULT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=14 DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `user`
--

LOCK TABLES `user` WRITE;
/*!40000 ALTER TABLE `user` DISABLE KEYS */;
INSERT INTO `user` VALUES (7,'admin_vp','admin@visualpathit.com',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,'$2a$11$0a7VdTr4rfCQqtsvpng6GuJnzUmQ7gZiHXgzGPgm5hkRa3avXgBLK'),(8,'WahidKhan','wahid.khan74@gmail.com',NULL,NULL,'28/03/1994','M Khan','R Khan','male','unMarried','Ameerpet,Hyderabad','Ameerpet,Hyderabad','Software Engineer','Software Engineer','Java HTML CSS ','8888888888','8888888888','Indian','english','2 ','$2a$11$UgG9TkHcgl02LxlqxRHYhOf7Xv4CxFmFEgS0FpUdk42OeslI.6JAW'),(9,'Gayatri','gayatri@gmail.com',NULL,NULL,'20/06/1993','K','L','male','unMarried','Ameerpet,Hyderabad','Ameerpet,Hyderabad','Software Engineer','Software Engineer','Java HTML CSS ','9999999999','9999999999','India','english','5','$2a$11$gwvsvUrFU.YirMM1Yb7NweFudLUM91AzH5BDFnhkNzfzpjG.FplYO'),(10,'WahidKhan2','wahid.khan741@gmail.com',NULL,NULL,'28/03/1994','M Khan','R Khan','male','unMarried','Ameerpet,Hyderabad','Ameerpet,Hyderabad','Software Engineer','Software Engineer','Java HTML CSS ','7777777777','777777777','India','english','7','$2a$11$6oZEgfGGQAH23EaXLVZ2WOSKxcEJFnBSw2N2aghab0s2kcxSQwjhC'),(11,'KiranKumar','kiran@gmail.com',NULL,NULL,'8/12/1993','K K','RK','male','unMarried','California','James Street','Software Engineer','Software Engineer','Java HTML CSS ','1010101010','1010101010','India','english','10','$2a$11$EXwpna1MlFFlKW5ut1iVi.AoeIulkPPmcOHFO8pOoQt1IYU9COU0m'),(12,'Saikumar','sai@gmail.com',NULL,NULL,'20/06/1993','Sai RK','Sai AK','male','unMarried','California','US','Software Engineer','Software Engineer','Java HTML CSS AWS','8888888111','8888888111','India','english','8','$2a$11$pzWNzzR.HUkHzz2zhAgqOeCl0WaTgY33NxxJ7n0l.rnEqjB9JO7vy'),(13,'RamSai','ram@gmail.com',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,'$2a$11$6BSmYPrT8I8b9yHmx.uTRu/QxnQM2vhZYQa8mR33aReWA4WFihyGK');
/*!40000 ALTER TABLE `user` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `user_role`
--

DROP TABLE IF EXISTS `user_role`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `user_role` (
  `user_id` int(11) NOT NULL,
  `role_id` int(11) NOT NULL,
  PRIMARY KEY (`user_id`,`role_id`),
  KEY `fk_user_role_roleid_idx` (`role_id`),
  CONSTRAINT `fk_user_role_roleid` FOREIGN KEY (`role_id`) REFERENCES `role` (`id`) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT `fk_user_role_userid` FOREIGN KEY (`user_id`) REFERENCES `user` (`id`) ON DELETE CASCADE ON UPDATE CASCADE
) ENGINE=InnoDB DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `user_role`
--

LOCK TABLES `user_role` WRITE;
/*!40000 ALTER TABLE `user_role` DISABLE KEYS */;
INSERT INTO `user_role` VALUES (4,1),(5,1),(6,1),(7,1),(8,1),(9,1),(10,1),(11,1),(12,1),(13,1);
/*!40000 ALTER TABLE `user_role` ENABLE KEYS */;
UNLOCK TABLES;
/*!40103 SET TIME_ZONE=@OLD_TIME_ZONE */;

/*!40101 SET SQL_MODE=@OLD_SQL_MODE */;
/*!40014 SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS */;
/*!40014 SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS */;
/*!40101 SET CHARACTER_SET_CLIENT=@OLD_CHARACTER_SET_CLIENT */;
/*!40101 SET CHARACTER_SET_RESULTS=@OLD_CHARACTER_SET_RESULTS */;
/*!40101 SET COLLATION_CONNECTION=@OLD_COLLATION_CONNECTION */;
/*!40111 SET SQL_NOTES=@OLD_SQL_NOTES */;

-- Dump completed on 2017-12-07 16:32:31
